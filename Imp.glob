DIGEST a9290f5fbcdc7dc9c242e008833a301c
FPL.Imp
R477:508 Coq.Relations.Relation_Operators <> <> lib
R526:559 Coq.Relations.Relation_Definitions <> <> lib
R577:603 Coq.Classes.RelationClasses <> <> lib
R621:641 Coq.Classes.Morphisms <> <> lib
R659:677 Coq.micromega.Psatz <> <> lib
R695:711 Coq.ZArith.ZArith <> <> lib
R729:746 Coq.Strings.String <> <> lib
R764:782 Coq.Logic.Classical <> <> lib
R800:811 PL.RTClosure <> <> lib
R825:839 PL.RTClosure <> clos_refl_trans ind
R825:839 PL.RTClosure <> clos_refl_trans ind
R862:879 PL.RTClosure <> clos_refl_trans_1n ind
R862:879 PL.RTClosure <> clos_refl_trans_1n ind
R902:919 PL.RTClosure <> clos_refl_trans_n1 ind
R902:919 PL.RTClosure <> clos_refl_trans_n1 ind
mod 955:958 <> Func
def 973:975 Func add
binder 978:978 <> A:1
R994:997 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R998:998 Coq.Numbers.BinNums <> Z ind
R993:993 PL.Imp <> A:1 var
binder 988:988 <> f:2
binder 990:990 <> g:3
R1003:1006 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1007:1007 Coq.Numbers.BinNums <> Z ind
R1002:1002 PL.Imp <> A:1 var
binder 1018:1018 <> a:4
R1026:1028 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R1023:1023 PL.Imp <> f:2 var
R1025:1025 PL.Imp <> a:4 var
R1029:1029 PL.Imp <> g:3 var
R1031:1031 PL.Imp <> a:4 var
def 1046:1048 Func sub
binder 1051:1051 <> A:5
R1067:1070 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1071:1071 Coq.Numbers.BinNums <> Z ind
R1066:1066 PL.Imp <> A:5 var
binder 1061:1061 <> f:6
binder 1063:1063 <> g:7
R1076:1079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1080:1080 Coq.Numbers.BinNums <> Z ind
R1075:1075 PL.Imp <> A:5 var
binder 1091:1091 <> a:8
R1099:1101 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R1096:1096 PL.Imp <> f:6 var
R1098:1098 PL.Imp <> a:8 var
R1102:1102 PL.Imp <> g:7 var
R1104:1104 PL.Imp <> a:8 var
def 1119:1121 Func mul
binder 1124:1124 <> A:9
R1140:1143 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1144:1144 Coq.Numbers.BinNums <> Z ind
R1139:1139 PL.Imp <> A:9 var
binder 1134:1134 <> f:10
binder 1136:1136 <> g:11
R1149:1152 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1153:1153 Coq.Numbers.BinNums <> Z ind
R1148:1148 PL.Imp <> A:9 var
binder 1164:1164 <> a:12
R1172:1174 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R1169:1169 PL.Imp <> f:10 var
R1171:1171 PL.Imp <> a:12 var
R1175:1175 PL.Imp <> g:11 var
R1177:1177 PL.Imp <> a:12 var
def 1192:1198 Func test_eq
binder 1201:1201 <> A:13
R1217:1220 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1221:1221 Coq.Numbers.BinNums <> Z ind
R1216:1216 PL.Imp <> A:13 var
binder 1211:1211 <> f:14
binder 1213:1213 <> g:15
R1226:1229 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1225:1225 PL.Imp <> A:13 var
binder 1244:1244 <> a:16
R1252:1254 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1249:1249 PL.Imp <> f:14 var
R1251:1251 PL.Imp <> a:16 var
R1255:1255 PL.Imp <> g:15 var
R1257:1257 PL.Imp <> a:16 var
def 1272:1278 Func test_le
binder 1281:1281 <> A:17
R1297:1300 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1301:1301 Coq.Numbers.BinNums <> Z ind
R1296:1296 PL.Imp <> A:17 var
binder 1291:1291 <> f:18
binder 1293:1293 <> g:19
R1306:1309 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1305:1305 PL.Imp <> A:17 var
binder 1324:1324 <> a:20
R1332:1335 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1329:1329 PL.Imp <> f:18 var
R1331:1331 PL.Imp <> a:20 var
R1336:1336 PL.Imp <> g:19 var
R1338:1338 PL.Imp <> a:20 var
def 1353:1357 Func equiv
binder 1360:1360 <> A:21
R1376:1379 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1380:1380 Coq.Numbers.BinNums <> Z ind
R1375:1375 PL.Imp <> A:21 var
binder 1370:1370 <> f:22
binder 1372:1372 <> g:23
binder 1401:1401 <> a:24
R1407:1409 Coq.Init.Logic <> ::type_scope:x_'='_x not
R1404:1404 PL.Imp <> f:22 var
R1406:1406 PL.Imp <> a:24 var
R1410:1410 PL.Imp <> g:23 var
R1412:1412 PL.Imp <> a:24 var
def 1427:1428 Func le
binder 1431:1431 <> A:25
R1447:1450 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1451:1451 Coq.Numbers.BinNums <> Z ind
R1446:1446 PL.Imp <> A:25 var
binder 1441:1441 <> f:26
binder 1443:1443 <> g:27
binder 1472:1472 <> a:28
R1478:1481 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R1475:1475 PL.Imp <> f:26 var
R1477:1477 PL.Imp <> a:28 var
R1482:1482 PL.Imp <> g:27 var
R1484:1484 PL.Imp <> a:28 var
R1492:1495 PL.Imp Func <> mod
mod 1506:1509 <> Sets
def 1524:1527 Sets full
binder 1530:1530 <> A:29
R1541:1544 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1540:1540 PL.Imp <> A:29 var
R1562:1565 Coq.Init.Logic <> True ind
def 1580:1584 Sets empty
binder 1587:1587 <> A:30
R1598:1601 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1597:1597 PL.Imp <> A:30 var
R1619:1623 Coq.Init.Logic <> False ind
def 1638:1646 Sets intersect
binder 1649:1649 <> A:31
R1665:1668 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1664:1664 PL.Imp <> A:31 var
binder 1659:1659 <> X:32
binder 1661:1661 <> Y:33
binder 1682:1682 <> a:34
R1690:1693 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R1687:1687 PL.Imp <> X:32 var
R1689:1689 PL.Imp <> a:34 var
R1694:1694 PL.Imp <> Y:33 var
R1696:1696 PL.Imp <> a:34 var
def 1711:1720 Sets complement
binder 1723:1723 <> A:35
R1737:1740 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1736:1736 PL.Imp <> A:35 var
binder 1733:1733 <> X:36
binder 1754:1754 <> a:37
R1759:1760 Coq.Init.Logic <> ::type_scope:'~'_x not
R1761:1761 PL.Imp <> X:36 var
R1763:1763 PL.Imp <> a:37 var
def 1778:1782 Sets equiv
binder 1785:1785 <> A:38
R1801:1804 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R1800:1800 PL.Imp <> A:38 var
binder 1795:1795 <> X:39
binder 1797:1797 <> Y:40
binder 1829:1829 <> a:41
R1835:1839 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R1832:1832 PL.Imp <> X:39 var
R1834:1834 PL.Imp <> a:41 var
R1840:1840 PL.Imp <> Y:40 var
R1842:1842 PL.Imp <> a:41 var
R1850:1853 PL.Imp Sets <> mod
R1940:1947 PL.Imp <> add def
not 1928:1928 <> ::func_scope:x_'+'_x
R1988:1995 PL.Imp <> sub def
not 1976:1976 <> ::func_scope:x_'-'_x
R2036:2043 PL.Imp <> mul def
not 2024:2024 <> ::func_scope:x_'*'_x
prf 2070:2084 <> Func_equiv_refl
binder 2094:2094 <> A:42
R2097:2105 Coq.Classes.RelationClasses <> Reflexive class
R2109:2118 PL.Imp <> equiv def
R2120:2120 PL.Imp <> A:42 var
R2150:2158 Coq.Classes.RelationClasses <> Reflexive class
R2170:2179 PL.Imp <> equiv def
prf 2219:2232 <> Func_equiv_sym
binder 2242:2242 <> A:43
R2245:2253 Coq.Classes.RelationClasses <> Symmetric class
R2257:2266 PL.Imp <> equiv def
R2268:2268 PL.Imp <> A:43 var
R2298:2306 Coq.Classes.RelationClasses <> Symmetric class
R2318:2327 PL.Imp <> equiv def
prf 2380:2395 <> Func_equiv_trans
binder 2405:2405 <> A:44
R2408:2417 Coq.Classes.RelationClasses <> Transitive class
R2421:2430 PL.Imp <> equiv def
R2432:2432 PL.Imp <> A:44 var
R2462:2471 Coq.Classes.RelationClasses <> Transitive class
R2483:2492 PL.Imp <> equiv def
prf 2549:2563 <> Sets_equiv_refl
binder 2573:2573 <> A:45
R2576:2584 Coq.Classes.RelationClasses <> Reflexive class
R2588:2597 PL.Imp <> equiv def
R2599:2599 PL.Imp <> A:45 var
R2629:2637 Coq.Classes.RelationClasses <> Reflexive class
R2649:2658 PL.Imp <> equiv def
prf 2692:2705 <> Sets_equiv_sym
binder 2715:2715 <> A:46
R2718:2726 Coq.Classes.RelationClasses <> Symmetric class
R2730:2739 PL.Imp <> equiv def
R2741:2741 PL.Imp <> A:46 var
R2771:2779 Coq.Classes.RelationClasses <> Symmetric class
R2791:2800 PL.Imp <> equiv def
prf 2853:2868 <> Sets_equiv_trans
binder 2878:2878 <> A:47
R2881:2890 Coq.Classes.RelationClasses <> Transitive class
R2894:2903 PL.Imp <> equiv def
R2905:2905 PL.Imp <> A:47 var
R2935:2944 Coq.Classes.RelationClasses <> Transitive class
R2956:2965 PL.Imp <> equiv def
prf 3022:3035 <> Func_add_equiv
binder 3045:3045 <> A:48
R3050:3055 Coq.Classes.Morphisms <> Proper class
R3109:3116 PL.Imp <> add def
R3071:3075 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3059:3068 PL.Imp <> equiv def
R3070:3070 PL.Imp <> A:48 var
R3089:3093 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3077:3086 PL.Imp <> equiv def
R3088:3088 PL.Imp <> A:48 var
R3095:3104 PL.Imp <> equiv def
R3106:3106 PL.Imp <> A:48 var
R3145:3150 Coq.Classes.Morphisms <> Proper class
R3153:3162 Coq.Classes.Morphisms <> respectful def
R3200:3209 PL.Imp <> equiv def
R3226:3235 PL.Imp <> equiv def
R3253:3262 PL.Imp <> equiv def
R3284:3291 PL.Imp <> add def
prf 3338:3351 <> Func_sub_equiv
binder 3361:3361 <> A:49
R3366:3371 Coq.Classes.Morphisms <> Proper class
R3425:3432 PL.Imp <> sub def
R3387:3391 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3375:3384 PL.Imp <> equiv def
R3386:3386 PL.Imp <> A:49 var
R3405:3409 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3393:3402 PL.Imp <> equiv def
R3404:3404 PL.Imp <> A:49 var
R3411:3420 PL.Imp <> equiv def
R3422:3422 PL.Imp <> A:49 var
R3461:3466 Coq.Classes.Morphisms <> Proper class
R3469:3478 Coq.Classes.Morphisms <> respectful def
R3516:3525 PL.Imp <> equiv def
R3542:3551 PL.Imp <> equiv def
R3569:3578 PL.Imp <> equiv def
R3600:3607 PL.Imp <> sub def
prf 3654:3667 <> Func_mul_equiv
binder 3677:3677 <> A:50
R3682:3687 Coq.Classes.Morphisms <> Proper class
R3741:3748 PL.Imp <> mul def
R3703:3707 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3691:3700 PL.Imp <> equiv def
R3702:3702 PL.Imp <> A:50 var
R3721:3725 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R3709:3718 PL.Imp <> equiv def
R3720:3720 PL.Imp <> A:50 var
R3727:3736 PL.Imp <> equiv def
R3738:3738 PL.Imp <> A:50 var
R3777:3782 Coq.Classes.Morphisms <> Proper class
R3785:3794 Coq.Classes.Morphisms <> respectful def
R3832:3841 PL.Imp <> equiv def
R3858:3867 PL.Imp <> equiv def
R3885:3894 PL.Imp <> equiv def
R3916:3923 PL.Imp <> mul def
prf 3970:3987 <> Func_test_eq_equiv
binder 3997:3997 <> A:51
R4002:4007 Coq.Classes.Morphisms <> Proper class
R4061:4072 PL.Imp <> test_eq def
R4023:4027 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4011:4020 PL.Imp <> equiv def
R4022:4022 PL.Imp <> A:51 var
R4041:4045 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4029:4038 PL.Imp <> equiv def
R4040:4040 PL.Imp <> A:51 var
R4047:4056 PL.Imp <> equiv def
R4058:4058 PL.Imp <> A:51 var
R4091:4096 Coq.Classes.Morphisms <> Proper class
R4099:4108 Coq.Classes.Morphisms <> respectful def
R4120:4129 PL.Imp <> equiv def
R4132:4141 PL.Imp <> equiv def
R4144:4155 PL.Imp <> test_eq def
prf 4240:4257 <> Func_test_le_equiv
binder 4267:4267 <> A:52
R4272:4277 Coq.Classes.Morphisms <> Proper class
R4331:4342 PL.Imp <> test_le def
R4293:4297 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4281:4290 PL.Imp <> equiv def
R4292:4292 PL.Imp <> A:52 var
R4311:4315 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4299:4308 PL.Imp <> equiv def
R4310:4310 PL.Imp <> A:52 var
R4317:4326 PL.Imp <> equiv def
R4328:4328 PL.Imp <> A:52 var
R4361:4366 Coq.Classes.Morphisms <> Proper class
R4369:4378 Coq.Classes.Morphisms <> respectful def
R4390:4399 PL.Imp <> equiv def
R4402:4411 PL.Imp <> equiv def
R4414:4425 PL.Imp <> test_le def
prf 4510:4529 <> Sets_intersect_equiv
binder 4539:4539 <> A:53
R4544:4549 Coq.Classes.Morphisms <> Proper class
R4603:4616 PL.Imp <> intersect def
R4565:4569 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4553:4562 PL.Imp <> equiv def
R4564:4564 PL.Imp <> A:53 var
R4583:4587 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4571:4580 PL.Imp <> equiv def
R4582:4582 PL.Imp <> A:53 var
R4589:4598 PL.Imp <> equiv def
R4600:4600 PL.Imp <> A:53 var
R4635:4640 Coq.Classes.Morphisms <> Proper class
R4643:4652 Coq.Classes.Morphisms <> respectful def
R4664:4673 PL.Imp <> equiv def
R4676:4689 PL.Imp <> intersect def
prf 4774:4794 <> Sets_complement_equiv
binder 4804:4804 <> A:54
R4809:4814 Coq.Classes.Morphisms <> Proper class
R4850:4864 PL.Imp <> complement def
R4830:4834 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R4818:4827 PL.Imp <> equiv def
R4829:4829 PL.Imp <> A:54 var
R4836:4845 PL.Imp <> equiv def
R4847:4847 PL.Imp <> A:54 var
R4883:4888 Coq.Classes.Morphisms <> Proper class
R4891:4900 Coq.Classes.Morphisms <> respectful def
R4912:4921 PL.Imp <> equiv def
R4924:4938 PL.Imp <> complement def
prf 5011:5036 <> Sets_complement_complement
binder 5046:5046 <> A:55
R5053:5056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5052:5052 PL.Imp <> A:55 var
binder 5049:5049 <> S:56
R5066:5075 PL.Imp <> equiv def
R5115:5115 PL.Imp <> S:56 var
R5078:5092 PL.Imp <> complement def
R5095:5109 PL.Imp <> complement def
R5111:5111 PL.Imp <> S:56 var
R5144:5153 PL.Imp <> equiv def
R5156:5170 PL.Imp <> complement def
mod 5678:5683 <> BinRel
def 5698:5699 BinRel id
binder 5702:5702 <> A:57
R5713:5716 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5718:5721 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5717:5717 PL.Imp <> A:57 var
R5712:5712 PL.Imp <> A:57 var
binder 5734:5734 <> a:58
binder 5736:5736 <> b:59
R5742:5744 Coq.Init.Logic <> ::type_scope:x_'='_x not
R5741:5741 PL.Imp <> a:58 var
R5745:5745 PL.Imp <> b:59 var
def 5760:5764 BinRel empty
binder 5767:5767 <> A:60
binder 5769:5769 <> B:61
R5780:5783 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5785:5788 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5784:5784 PL.Imp <> B:61 var
R5779:5779 PL.Imp <> A:60 var
binder 5801:5801 <> a:62
binder 5803:5803 <> b:63
R5808:5812 Coq.Init.Logic <> False ind
def 5827:5832 BinRel concat
binder 5835:5835 <> A:64
binder 5837:5837 <> B:65
binder 5839:5839 <> C:66
R5854:5857 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5859:5862 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5858:5858 PL.Imp <> B:65 var
R5853:5853 PL.Imp <> A:64 var
binder 5849:5850 <> r1:67
R5875:5878 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5880:5883 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5879:5879 PL.Imp <> C:66 var
R5874:5874 PL.Imp <> B:65 var
binder 5870:5871 <> r2:68
R5892:5895 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5897:5900 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5896:5896 PL.Imp <> C:66 var
R5891:5891 PL.Imp <> A:64 var
binder 5915:5915 <> a:69
binder 5917:5917 <> c:70
R5922:5928 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R5930:5931 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 5929:5929 <> b:71
R5938:5941 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R5932:5933 PL.Imp <> r1:67 var
R5937:5937 PL.Imp <> b:71 var
R5935:5935 PL.Imp <> a:69 var
R5942:5943 PL.Imp <> r2:68 var
R5947:5947 PL.Imp <> c:70 var
R5945:5945 PL.Imp <> b:71 var
def 5962:5968 BinRel filter1
binder 5971:5971 <> A:72
binder 5973:5973 <> B:73
R5987:5990 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R5986:5986 PL.Imp <> A:72 var
binder 5983:5983 <> f:74
R5999:6002 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6004:6007 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6003:6003 PL.Imp <> B:73 var
R5998:5998 PL.Imp <> A:72 var
binder 6022:6022 <> a:75
binder 6024:6024 <> b:76
R6029:6029 PL.Imp <> f:74 var
R6031:6031 PL.Imp <> a:75 var
def 6046:6052 BinRel filter2
binder 6055:6055 <> A:77
binder 6057:6057 <> B:78
R6071:6074 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6070:6070 PL.Imp <> B:78 var
binder 6067:6067 <> f:79
R6083:6086 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6088:6091 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6087:6087 PL.Imp <> B:78 var
R6082:6082 PL.Imp <> A:77 var
binder 6106:6106 <> a:80
binder 6108:6108 <> b:81
R6113:6113 PL.Imp <> f:79 var
R6115:6115 PL.Imp <> b:81 var
def 6130:6134 BinRel union
binder 6137:6137 <> A:82
binder 6139:6139 <> B:83
R6157:6160 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6162:6165 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6161:6161 PL.Imp <> B:83 var
R6156:6156 PL.Imp <> A:82 var
binder 6149:6150 <> r1:84
binder 6152:6153 <> r2:85
R6174:6177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6179:6182 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6178:6178 PL.Imp <> B:83 var
R6173:6173 PL.Imp <> A:82 var
binder 6197:6197 <> a:86
binder 6199:6199 <> b:87
R6210:6213 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R6204:6205 PL.Imp <> r1:84 var
R6209:6209 PL.Imp <> b:87 var
R6207:6207 PL.Imp <> a:86 var
R6214:6215 PL.Imp <> r2:85 var
R6219:6219 PL.Imp <> b:87 var
R6217:6217 PL.Imp <> a:86 var
def 6234:6245 BinRel intersection
binder 6248:6248 <> A:88
binder 6250:6250 <> B:89
R6268:6271 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6273:6276 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6272:6272 PL.Imp <> B:89 var
R6267:6267 PL.Imp <> A:88 var
binder 6260:6261 <> r1:90
binder 6263:6264 <> r2:91
R6285:6288 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6290:6293 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6289:6289 PL.Imp <> B:89 var
R6284:6284 PL.Imp <> A:88 var
binder 6308:6308 <> a:92
binder 6310:6310 <> b:93
R6321:6324 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6315:6316 PL.Imp <> r1:90 var
R6320:6320 PL.Imp <> b:93 var
R6318:6318 PL.Imp <> a:92 var
R6325:6326 PL.Imp <> r2:91 var
R6330:6330 PL.Imp <> b:93 var
R6328:6328 PL.Imp <> a:92 var
def 6345:6355 BinRel omega_union
binder 6358:6358 <> A:94
binder 6360:6360 <> B:95
R6377:6380 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6382:6385 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6387:6390 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6386:6386 PL.Imp <> B:95 var
R6381:6381 PL.Imp <> A:94 var
R6374:6376 Coq.Init.Datatypes <> nat ind
binder 6370:6371 <> rs:96
R6399:6402 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6404:6407 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6403:6403 PL.Imp <> B:95 var
R6398:6398 PL.Imp <> A:94 var
binder 6422:6424 <> st1:97
binder 6426:6428 <> st2:98
R6433:6439 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R6441:6442 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 6440:6440 <> n:99
R6443:6444 PL.Imp <> rs:96 var
R6452:6454 PL.Imp <> st2:98 var
R6448:6450 PL.Imp <> st1:97 var
R6446:6446 PL.Imp <> n:99 var
def 6469:6476 BinRel test_rel
binder 6479:6479 <> A:100
R6487:6490 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6486:6486 PL.Imp <> A:100 var
binder 6483:6483 <> X:101
R6499:6502 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6504:6507 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6503:6503 PL.Imp <> A:100 var
R6498:6498 PL.Imp <> A:100 var
binder 6522:6524 <> st1:102
binder 6526:6528 <> st2:103
R6542:6545 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R6536:6538 Coq.Init.Logic <> ::type_scope:x_'='_x not
R6533:6535 PL.Imp <> st1:102 var
R6539:6541 PL.Imp <> st2:103 var
R6546:6546 PL.Imp <> X:101 var
R6548:6550 PL.Imp <> st1:102 var
def 6565:6569 BinRel equiv
binder 6572:6572 <> A:104
binder 6574:6574 <> B:105
R6592:6595 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6597:6600 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6596:6596 PL.Imp <> B:105 var
R6591:6591 PL.Imp <> A:104 var
binder 6584:6585 <> r1:106
binder 6587:6588 <> r2:107
binder 6625:6625 <> a:108
binder 6627:6627 <> b:109
R6636:6640 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R6630:6631 PL.Imp <> r1:106 var
R6635:6635 PL.Imp <> b:109 var
R6633:6633 PL.Imp <> a:108 var
R6641:6642 PL.Imp <> r2:107 var
R6646:6646 PL.Imp <> b:109 var
R6644:6644 PL.Imp <> a:108 var
def 6661:6662 BinRel le
binder 6665:6665 <> A:110
binder 6667:6667 <> B:111
R6685:6688 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6690:6693 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6689:6689 PL.Imp <> B:111 var
R6684:6684 PL.Imp <> A:110 var
binder 6677:6678 <> r1:112
binder 6680:6681 <> r2:113
binder 6718:6718 <> a:114
binder 6720:6720 <> b:115
R6729:6732 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R6733:6734 PL.Imp <> r2:113 var
R6738:6738 PL.Imp <> b:115 var
R6736:6736 PL.Imp <> a:114 var
R6723:6724 PL.Imp <> r1:112 var
R6728:6728 PL.Imp <> b:115 var
R6726:6726 PL.Imp <> a:114 var
R6746:6751 PL.Imp BinRel <> mod
prf 6761:6774 <> Rel_equiv_refl
binder 6784:6784 <> A:116
binder 6786:6786 <> B:117
R6789:6797 Coq.Classes.RelationClasses <> Reflexive class
R6801:6812 PL.Imp <> equiv def
R6816:6816 PL.Imp <> B:117 var
R6814:6814 PL.Imp <> A:116 var
R6836:6844 Coq.Classes.RelationClasses <> Reflexive class
R6847:6858 PL.Imp <> equiv def
prf 6898:6910 <> Rel_equiv_sym
binder 6920:6920 <> A:118
binder 6922:6922 <> B:119
R6925:6933 Coq.Classes.RelationClasses <> Symmetric class
R6937:6948 PL.Imp <> equiv def
R6952:6952 PL.Imp <> B:119 var
R6950:6950 PL.Imp <> A:118 var
R6972:6980 Coq.Classes.RelationClasses <> Symmetric class
R6983:6994 PL.Imp <> equiv def
prf 7047:7061 <> Rel_equiv_trans
binder 7071:7071 <> A:120
binder 7073:7073 <> B:121
R7076:7085 Coq.Classes.RelationClasses <> Transitive class
R7089:7100 PL.Imp <> equiv def
R7104:7104 PL.Imp <> B:121 var
R7102:7102 PL.Imp <> A:120 var
R7124:7133 Coq.Classes.RelationClasses <> Transitive class
R7136:7147 PL.Imp <> equiv def
prf 7204:7221 <> Rel_equiv_test_rel
binder 7231:7231 <> A:122
R7236:7241 Coq.Classes.Morphisms <> Proper class
R7281:7295 PL.Imp <> test_rel def
R7257:7261 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7245:7254 PL.Imp <> equiv def
R7256:7256 PL.Imp <> A:122 var
R7263:7274 PL.Imp <> equiv def
R7278:7278 PL.Imp <> A:122 var
R7276:7276 PL.Imp <> A:122 var
R7314:7319 Coq.Classes.Morphisms <> Proper class
R7322:7331 Coq.Classes.Morphisms <> respectful def
R7343:7352 PL.Imp <> equiv def
R7355:7366 PL.Imp <> equiv def
R7369:7383 PL.Imp <> test_rel def
prf 7454:7469 <> Rel_equiv_concat
binder 7479:7479 <> A:123
R7484:7489 Coq.Classes.Morphisms <> Proper class
R7555:7567 PL.Imp <> concat def
R7509:7513 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7493:7504 PL.Imp <> equiv def
R7508:7508 PL.Imp <> A:123 var
R7506:7506 PL.Imp <> A:123 var
R7531:7535 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7515:7526 PL.Imp <> equiv def
R7530:7530 PL.Imp <> A:123 var
R7528:7528 PL.Imp <> A:123 var
R7537:7548 PL.Imp <> equiv def
R7552:7552 PL.Imp <> A:123 var
R7550:7550 PL.Imp <> A:123 var
R7586:7591 Coq.Classes.Morphisms <> Proper class
R7594:7603 Coq.Classes.Morphisms <> respectful def
R7615:7626 PL.Imp <> equiv def
R7629:7641 PL.Imp <> concat def
R7695:7697 Coq.Init.Logic <> iff def
prf 7859:7873 <> Rel_equiv_union
binder 7883:7883 <> A:124
R7888:7893 Coq.Classes.Morphisms <> Proper class
R7959:7970 PL.Imp <> union def
R7913:7917 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7897:7908 PL.Imp <> equiv def
R7912:7912 PL.Imp <> A:124 var
R7910:7910 PL.Imp <> A:124 var
R7935:7939 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R7919:7930 PL.Imp <> equiv def
R7934:7934 PL.Imp <> A:124 var
R7932:7932 PL.Imp <> A:124 var
R7941:7952 PL.Imp <> equiv def
R7956:7956 PL.Imp <> A:124 var
R7954:7954 PL.Imp <> A:124 var
R7989:7994 Coq.Classes.Morphisms <> Proper class
R7997:8006 Coq.Classes.Morphisms <> respectful def
R8018:8029 PL.Imp <> equiv def
R8032:8043 PL.Imp <> union def
prf 8128:8148 <> Rel_equiv_omega_union
binder 8158:8158 <> A:125
binder 8160:8160 <> B:126
R8173:8176 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8178:8181 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8183:8186 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8182:8182 PL.Imp <> B:126 var
R8177:8177 PL.Imp <> A:125 var
R8170:8172 Coq.Init.Datatypes <> nat ind
binder 8163:8164 <> r1:127
binder 8166:8167 <> r2:128
R8196:8196 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8233:8239 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8240:8251 PL.Imp <> equiv def
R8278:8295 PL.Imp <> omega_union def
R8297:8298 PL.Imp <> r2:128 var
R8254:8271 PL.Imp <> omega_union def
R8273:8274 PL.Imp <> r1:127 var
binder 8204:8204 <> n:129
R8207:8218 PL.Imp <> equiv def
R8228:8229 PL.Imp <> r2:128 var
R8231:8231 PL.Imp <> n:129 var
R8221:8222 PL.Imp <> r1:127 var
R8224:8224 PL.Imp <> n:129 var
R8318:8329 PL.Imp <> equiv def
R8332:8349 PL.Imp <> omega_union def
R8371:8373 Coq.Init.Logic <> iff def
prf 8501:8516 <> Rel_equiv_Rel_le
binder 8526:8526 <> A:130
binder 8528:8528 <> B:131
R8539:8542 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8544:8547 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8543:8543 PL.Imp <> B:131 var
R8538:8538 PL.Imp <> A:130 var
binder 8531:8532 <> r1:132
binder 8534:8535 <> r2:133
R8575:8579 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R8557:8568 PL.Imp <> equiv def
R8573:8574 PL.Imp <> r2:133 var
R8570:8571 PL.Imp <> r1:132 var
R8595:8598 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R8580:8588 PL.Imp <> le def
R8593:8594 PL.Imp <> r2:133 var
R8590:8591 PL.Imp <> r1:132 var
R8599:8607 PL.Imp <> le def
R8612:8613 PL.Imp <> r1:132 var
R8609:8610 PL.Imp <> r2:133 var
R8632:8643 PL.Imp <> equiv def
R8646:8654 PL.Imp <> le def
R8676:8678 Coq.Init.Logic <> iff def
R8771:8773 Coq.Init.Logic <> iff def
prf 8826:8835 <> union_comm
binder 8845:8845 <> A:134
binder 8847:8847 <> B:135
R8858:8861 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8863:8866 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R8862:8862 PL.Imp <> B:135 var
R8857:8857 PL.Imp <> A:134 var
binder 8850:8851 <> r1:136
binder 8853:8854 <> r2:137
R8876:8887 PL.Imp <> equiv def
R8911:8922 PL.Imp <> union def
R8927:8928 PL.Imp <> r1:136 var
R8924:8925 PL.Imp <> r2:137 var
R8890:8901 PL.Imp <> union def
R8906:8907 PL.Imp <> r2:137 var
R8903:8904 PL.Imp <> r1:136 var
R8958:8969 PL.Imp <> equiv def
R8972:8983 PL.Imp <> union def
prf 9017:9032 <> Rel_concat_assoc
binder 9044:9044 <> A:138
binder 9046:9046 <> B:139
binder 9048:9048 <> C:140
binder 9050:9050 <> D:141
R9058:9061 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9063:9066 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9062:9062 PL.Imp <> B:139 var
R9057:9057 PL.Imp <> A:138 var
binder 9053:9054 <> R1:142
R9079:9082 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9084:9087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9083:9083 PL.Imp <> C:140 var
R9078:9078 PL.Imp <> B:139 var
binder 9074:9075 <> R2:143
R9100:9103 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9105:9108 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R9104:9104 PL.Imp <> D:141 var
R9099:9099 PL.Imp <> C:140 var
binder 9095:9096 <> R3:144
R9118:9129 PL.Imp <> equiv def
R9181:9193 PL.Imp <> concat def
R9199:9211 PL.Imp <> concat def
R9216:9217 PL.Imp <> R3:144 var
R9213:9214 PL.Imp <> R2:143 var
R9195:9196 PL.Imp <> R1:142 var
R9136:9148 PL.Imp <> concat def
R9172:9173 PL.Imp <> R3:144 var
R9151:9163 PL.Imp <> concat def
R9168:9169 PL.Imp <> R2:143 var
R9165:9166 PL.Imp <> R1:142 var
R9238:9249 PL.Imp <> equiv def
R9252:9264 PL.Imp <> concat def
def 9865:9867 <> var
R9878:9880 Coq.Init.Datatypes <> nat ind
ind 9894:9897 <> aexp
constr 9913:9916 <> ANum
constr 9930:9932 <> AId
constr 9948:9952 <> APlus
constr 9973:9978 <> AMinus
constr 9999:10003 <> AMult
R9923:9923 Coq.Numbers.BinNums <> Z ind
binder 9919:9919 <> n:147
R9939:9941 PL.Imp <> var def
binder 9935:9935 <> X:148
R9963:9966 PL.Imp <> aexp:145 ind
binder 9955:9956 <> a1:149
binder 9958:9959 <> a2:150
R9989:9992 PL.Imp <> aexp:145 ind
binder 9981:9982 <> a1:151
binder 9984:9985 <> a2:152
R10014:10017 PL.Imp <> aexp:145 ind
binder 10006:10007 <> a1:153
binder 10009:10010 <> a2:154
ind 10032:10035 <> bexp
constr 10051:10055 <> BTrue
constr 10061:10066 <> BFalse
constr 10072:10074 <> BEq
constr 10095:10097 <> BLe
constr 10118:10121 <> BNot
constr 10138:10141 <> BAnd
R10085:10088 PL.Imp <> aexp ind
binder 10077:10078 <> a1:157
binder 10080:10081 <> a2:158
R10108:10111 PL.Imp <> aexp ind
binder 10100:10101 <> a1:159
binder 10103:10104 <> a2:160
R10128:10131 PL.Imp <> bexp:155 ind
binder 10124:10124 <> b:161
R10152:10155 PL.Imp <> bexp:155 ind
binder 10144:10145 <> b1:162
binder 10147:10148 <> b2:163
R10160:10185 PL.Imp <> ANum constr
def 10200:10211 <> bool_to_bexp
R10218:10221 Coq.Init.Datatypes <> bool ind
binder 10214:10214 <> b:164
R10226:10229 PL.Imp <> bexp ind
R10239:10239 PL.Imp <> b:164 var
R10257:10262 PL.Imp <> BFalse constr
R10246:10250 PL.Imp <> BTrue constr
R10265:10301 PL.Imp <> bool_to_bexp def
R10425:10429 PL.Imp <> APlus constr
not 10413:10413 <> ::imp_scope:x_'+'_x
R10504:10509 PL.Imp <> AMinus constr
not 10492:10492 <> ::imp_scope:x_'-'_x
R10584:10588 PL.Imp <> AMult constr
not 10572:10572 <> ::imp_scope:x_'*'_x
R10664:10666 PL.Imp <> BLe constr
not 10651:10651 <> ::imp_scope:x_'<='_x
R10740:10742 PL.Imp <> BEq constr
not 10727:10727 <> ::imp_scope:x_'=='_x
R10816:10819 PL.Imp <> BAnd constr
not 10803:10803 <> ::imp_scope:x_'&&'_x
R10894:10897 PL.Imp <> BNot constr
not 10882:10882 <> ::imp_scope:'!'_x
ind 10961:10963 <> com
constr 10979:10983 <> CSkip
constr 10989:10992 <> CAss
constr 11018:11021 <> CSeq
constr 11041:11043 <> CIf
constr 11074:11079 <> CWhile
R10998:11000 PL.Imp <> var def
binder 10995:10995 <> X:167
R11008:11011 PL.Imp <> aexp ind
binder 11004:11004 <> a:168
R11032:11034 PL.Imp <> com:165 ind
binder 11024:11025 <> c1:169
binder 11027:11028 <> c2:170
R11050:11053 PL.Imp <> bexp ind
binder 11046:11046 <> b:171
R11065:11067 PL.Imp <> com:165 ind
binder 11057:11058 <> c1:172
binder 11060:11061 <> c2:173
R11086:11089 PL.Imp <> bexp ind
binder 11082:11082 <> b:174
R11097:11099 PL.Imp <> com:165 ind
binder 11093:11093 <> c:175
R11159:11163 PL.Imp <> CSkip constr
not 11144:11144 <> ::imp_scope:'Skip'
R11204:11207 PL.Imp <> CSeq constr
not 11187:11187 <> ::imp_scope:x_';;'_x
R11309:11314 PL.Imp <> CWhile constr
not 11273:11273 <> ::imp_scope:'While'_x_'Do'_x_'EndWhile'
R11422:11424 PL.Imp <> CIf constr
not 11378:11378 <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf'
mod 11492:11515 <> Abstract_Pretty_Printing
R11518:11543 PL.Imp <> AId constr
R11573:11576 PL.Imp <> CAss constr
not 11555:11555 Abstract_Pretty_Printing ::imp_scope:x_'::='_x
R11614:11637 PL.Imp Abstract_Pretty_Printing <> mod
def 11652:11656 <> state
R11670:11673 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11674:11674 Coq.Numbers.BinNums <> Z ind
R11667:11669 Coq.Init.Datatypes <> nat ind
def 11828:11840 <> constant_func
binder 11843:11843 <> A:176
R11856:11856 Coq.Numbers.BinNums <> Z ind
binder 11853:11853 <> c:177
R11861:11864 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11865:11865 Coq.Numbers.BinNums <> Z ind
R11860:11860 PL.Imp <> A:176 var
R11879:11879 PL.Imp <> c:177 var
def 11893:11901 <> query_var
R11907:11909 PL.Imp <> var def
binder 11904:11904 <> X:178
R11918:11921 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11922:11922 Coq.Numbers.BinNums <> Z ind
R11913:11917 PL.Imp <> state def
binder 11931:11932 <> st:179
R11937:11938 PL.Imp <> st:179 var
R11940:11940 PL.Imp <> X:178 var
def 11953:11957 <> aeval
R11964:11967 PL.Imp <> aexp ind
binder 11960:11960 <> a:180
R11977:11980 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R11981:11981 Coq.Numbers.BinNums <> Z ind
R11972:11976 PL.Imp <> state def
R11994:11994 PL.Imp <> a:180 var
R12005:12008 PL.Imp <> ANum constr
R12015:12027 PL.Imp <> constant_func def
R12035:12037 PL.Imp <> AId constr
R12044:12052 PL.Imp <> query_var def
R12060:12064 PL.Imp <> APlus constr
R12084:12086 PL.Imp <> ::func_scope:x_'+'_x not
R12076:12080 PL.Imp <> aeval:181 def
R12087:12091 PL.Imp <> aeval:181 def
R12106:12111 PL.Imp <> AMinus constr
R12132:12134 PL.Imp <> ::func_scope:x_'-'_x not
R12124:12128 PL.Imp <> aeval:181 def
R12135:12139 PL.Imp <> aeval:181 def
R12154:12158 PL.Imp <> AMult constr
R12178:12180 PL.Imp <> ::func_scope:x_'*'_x not
R12170:12174 PL.Imp <> aeval:181 def
R12181:12185 PL.Imp <> aeval:181 def
def 12213:12217 <> beval
R12224:12227 PL.Imp <> bexp ind
binder 12220:12220 <> b:183
R12237:12240 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12232:12236 PL.Imp <> state def
R12257:12257 PL.Imp <> b:183 var
R12268:12272 PL.Imp <> BTrue constr
R12283:12291 PL.Imp <> full def
R12297:12302 PL.Imp <> BFalse constr
R12312:12321 PL.Imp <> empty def
R12327:12329 PL.Imp <> BEq constr
R12342:12353 PL.Imp <> test_eq def
R12367:12371 PL.Imp <> aeval def
R12356:12360 PL.Imp <> aeval def
R12381:12383 PL.Imp <> BLe constr
R12396:12407 PL.Imp <> test_le def
R12421:12425 PL.Imp <> aeval def
R12410:12414 PL.Imp <> aeval def
R12435:12438 PL.Imp <> BNot constr
R12450:12464 PL.Imp <> complement def
R12467:12471 PL.Imp <> beval:184 def
R12481:12484 PL.Imp <> BAnd constr
R12496:12509 PL.Imp <> intersect def
R12524:12528 PL.Imp <> beval:184 def
R12512:12516 PL.Imp <> beval:184 def
def 12553:12558 <> if_sem
R12566:12569 PL.Imp <> bexp ind
binder 12563:12563 <> b:186
R12605:12608 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12614:12617 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12609:12613 PL.Imp <> state def
R12600:12604 PL.Imp <> state def
binder 12575:12585 <> then_branch:187
binder 12587:12597 <> else_branch:188
R12633:12636 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12642:12645 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12637:12641 PL.Imp <> state def
R12628:12632 PL.Imp <> state def
R12656:12667 PL.Imp <> union def
R12734:12746 PL.Imp <> concat def
R12783:12793 PL.Imp <> else_branch:188 var
R12749:12763 PL.Imp <> test_rel def
R12766:12770 PL.Imp <> beval def
R12773:12776 PL.Imp <> BNot constr
R12778:12778 PL.Imp <> b:186 var
R12674:12686 PL.Imp <> concat def
R12716:12726 PL.Imp <> then_branch:187 var
R12689:12703 PL.Imp <> test_rel def
R12706:12710 PL.Imp <> beval def
R12712:12712 PL.Imp <> b:186 var
def 12807:12820 <> iter_loop_body
R12826:12829 PL.Imp <> bexp ind
binder 12823:12823 <> b:189
R12873:12876 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12882:12885 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12877:12881 PL.Imp <> state def
R12868:12872 PL.Imp <> state def
binder 12857:12865 <> loop_body:190
R12920:12922 Coq.Init.Datatypes <> nat ind
binder 12917:12917 <> n:191
R12931:12934 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12940:12943 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R12935:12939 PL.Imp <> state def
R12926:12930 PL.Imp <> state def
R12960:12960 PL.Imp <> n:191 var
R12971:12971 Coq.Init.Datatypes <> O constr
R12985:12999 PL.Imp <> test_rel def
R13002:13006 PL.Imp <> beval def
R13009:13012 PL.Imp <> BNot constr
R13014:13014 PL.Imp <> b:189 var
R13022:13022 Coq.Init.Datatypes <> S constr
R13039:13051 PL.Imp <> concat def
R13104:13116 PL.Imp <> concat def
R13157:13170 PL.Imp <> iter_loop_body:192 def
R13174:13182 PL.Imp <> loop_body:190 var
R13172:13172 PL.Imp <> b:189 var
R13132:13140 PL.Imp <> loop_body:190 var
R13065:13079 PL.Imp <> test_rel def
R13082:13086 PL.Imp <> beval def
R13088:13088 PL.Imp <> b:189 var
def 13208:13215 <> loop_sem
R13221:13224 PL.Imp <> bexp ind
binder 13218:13218 <> b:194
R13244:13247 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13253:13256 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13248:13252 PL.Imp <> state def
R13239:13243 PL.Imp <> state def
binder 13228:13236 <> loop_body:195
R13271:13274 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13280:13283 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13275:13279 PL.Imp <> state def
R13266:13270 PL.Imp <> state def
R13294:13311 PL.Imp <> omega_union def
R13314:13327 PL.Imp <> iter_loop_body def
R13331:13339 PL.Imp <> loop_body:195 var
R13329:13329 PL.Imp <> b:194 var
def 13353:13357 <> ceval
R13363:13365 PL.Imp <> com ind
binder 13360:13360 <> c:196
R13374:13377 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13383:13386 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13378:13382 PL.Imp <> state def
R13369:13373 PL.Imp <> state def
R13403:13403 PL.Imp <> c:196 var
R13414:13418 PL.Imp <> CSkip constr
R13423:13431 PL.Imp <> id def
R13437:13440 PL.Imp <> CAss constr
binder 13459:13461 <> st1:199
binder 13463:13465 <> st2:200
R13497:13508 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R13483:13485 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13478:13480 PL.Imp <> st2:200 var
R13486:13490 PL.Imp <> aeval def
R13494:13496 PL.Imp <> st1:199 var
binder 13516:13516 <> Y:201
R13525:13528 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13534:13536 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13529:13531 PL.Imp <> st1:199 var
R13533:13533 PL.Imp <> Y:201 var
R13537:13539 PL.Imp <> st2:200 var
R13541:13541 PL.Imp <> Y:201 var
R13520:13523 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R13524:13524 PL.Imp <> Y:201 var
R13547:13550 PL.Imp <> CSeq constr
R13561:13573 PL.Imp <> concat def
R13587:13591 PL.Imp <> ceval:197 def
R13576:13580 PL.Imp <> ceval:197 def
R13601:13603 PL.Imp <> CIf constr
R13616:13621 PL.Imp <> if_sem def
R13637:13641 PL.Imp <> ceval:197 def
R13626:13630 PL.Imp <> ceval:197 def
R13651:13656 PL.Imp <> CWhile constr
R13665:13672 PL.Imp <> loop_sem def
R13677:13681 PL.Imp <> ceval:197 def
R13683:13683 PL.Imp <> c:196 var
prf 13700:13710 <> ceval_CSkip
R13724:13726 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13713:13717 PL.Imp <> ceval def
R13719:13723 PL.Imp <> CSkip constr
R13727:13735 PL.Imp <> id def
prf 13785:13794 <> ceval_CAss
binder 13804:13804 <> X:202
binder 13806:13806 <> E:203
R13827:13833 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13811:13815 PL.Imp <> ceval def
R13818:13821 PL.Imp <> CAss constr
R13825:13825 PL.Imp <> E:203 var
R13823:13823 PL.Imp <> X:202 var
binder 13838:13840 <> st1:204
binder 13842:13844 <> st2:205
R13874:13885 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R13860:13862 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13855:13857 PL.Imp <> st2:205 var
R13859:13859 PL.Imp <> X:202 var
R13863:13867 PL.Imp <> aeval def
R13871:13873 PL.Imp <> st1:204 var
R13869:13869 PL.Imp <> E:203 var
binder 13893:13893 <> Y:206
R13902:13905 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R13911:13913 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13906:13908 PL.Imp <> st1:204 var
R13910:13910 PL.Imp <> Y:206 var
R13914:13916 PL.Imp <> st2:205 var
R13918:13918 PL.Imp <> Y:206 var
R13897:13900 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R13896:13896 PL.Imp <> X:202 var
R13901:13901 PL.Imp <> Y:206 var
prf 13968:13977 <> ceval_CSeq
binder 13987:13988 <> c1:207
binder 13990:13991 <> c2:208
R14012:14014 Coq.Init.Logic <> ::type_scope:x_'='_x not
R13996:14000 PL.Imp <> ceval def
R14005:14008 PL.Imp <> ::imp_scope:x_';;'_x not
R14003:14004 PL.Imp <> c1:207 var
R14009:14010 PL.Imp <> c2:208 var
R14015:14027 PL.Imp <> concat def
R14041:14045 PL.Imp <> ceval def
R14047:14048 PL.Imp <> c2:208 var
R14030:14034 PL.Imp <> ceval def
R14036:14037 PL.Imp <> c1:207 var
prf 14099:14107 <> ceval_CIf
binder 14117:14117 <> b:209
binder 14119:14120 <> c1:210
binder 14122:14123 <> c2:211
R14147:14149 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14128:14132 PL.Imp <> ceval def
R14135:14137 PL.Imp <> CIf constr
R14144:14145 PL.Imp <> c2:211 var
R14141:14142 PL.Imp <> c1:210 var
R14139:14139 PL.Imp <> b:209 var
R14150:14155 PL.Imp <> if_sem def
R14171:14175 PL.Imp <> ceval def
R14177:14178 PL.Imp <> c2:211 var
R14160:14164 PL.Imp <> ceval def
R14166:14167 PL.Imp <> c1:210 var
R14157:14157 PL.Imp <> b:209 var
prf 14229:14240 <> ceval_CWhile
binder 14250:14250 <> b:212
binder 14252:14252 <> c:213
R14286:14288 Coq.Init.Logic <> ::type_scope:x_'='_x not
R14257:14261 PL.Imp <> ceval def
R14264:14269 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14271:14274 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14276:14284 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R14270:14270 PL.Imp <> b:212 var
R14275:14275 PL.Imp <> c:213 var
R14289:14296 PL.Imp <> loop_sem def
R14301:14305 PL.Imp <> ceval def
R14307:14307 PL.Imp <> c:213 var
R14298:14298 PL.Imp <> b:212 var
R14362:14366 PL.Imp <> ceval def
def 14394:14403 <> aexp_equiv
R14413:14416 PL.Imp <> aexp ind
binder 14406:14407 <> a1:214
binder 14409:14410 <> a2:215
R14430:14439 PL.Imp <> equiv def
R14453:14457 PL.Imp <> aeval def
R14459:14460 PL.Imp <> a2:215 var
R14442:14446 PL.Imp <> aeval def
R14448:14449 PL.Imp <> a1:214 var
prf 14471:14485 <> aexp_equiv_refl
R14488:14496 Coq.Classes.RelationClasses <> Reflexive class
R14498:14507 PL.Imp <> aexp_equiv def
R14526:14534 Coq.Classes.RelationClasses <> Reflexive class
R14537:14546 PL.Imp <> aexp_equiv def
prf 14586:14599 <> aexp_equiv_sym
R14602:14610 Coq.Classes.RelationClasses <> Symmetric class
R14612:14621 PL.Imp <> aexp_equiv def
R14640:14648 Coq.Classes.RelationClasses <> Symmetric class
R14651:14660 PL.Imp <> aexp_equiv def
prf 14713:14728 <> aexp_equiv_trans
R14731:14740 Coq.Classes.RelationClasses <> Transitive class
R14742:14751 PL.Imp <> aexp_equiv def
R14770:14779 Coq.Classes.RelationClasses <> Transitive class
R14782:14791 PL.Imp <> aexp_equiv def
prf 14848:14858 <> APlus_congr
R14863:14868 Coq.Classes.Morphisms <> Proper class
R14913:14917 PL.Imp <> APlus constr
R14881:14885 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R14871:14880 PL.Imp <> aexp_equiv def
R14896:14900 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R14886:14895 PL.Imp <> aexp_equiv def
R14901:14910 PL.Imp <> aexp_equiv def
R14936:14941 Coq.Classes.Morphisms <> Proper class
R14944:14953 Coq.Classes.Morphisms <> respectful def
R14965:14974 PL.Imp <> aexp_equiv def
prf 15058:15069 <> AMinus_congr
R15074:15079 Coq.Classes.Morphisms <> Proper class
R15124:15129 PL.Imp <> AMinus constr
R15092:15096 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15082:15091 PL.Imp <> aexp_equiv def
R15107:15111 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15097:15106 PL.Imp <> aexp_equiv def
R15112:15121 PL.Imp <> aexp_equiv def
R15148:15153 Coq.Classes.Morphisms <> Proper class
R15156:15165 Coq.Classes.Morphisms <> respectful def
R15177:15186 PL.Imp <> aexp_equiv def
prf 15270:15280 <> AMult_congr
R15285:15290 Coq.Classes.Morphisms <> Proper class
R15335:15339 PL.Imp <> AMult constr
R15303:15307 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15293:15302 PL.Imp <> aexp_equiv def
R15318:15322 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R15308:15317 PL.Imp <> aexp_equiv def
R15323:15332 PL.Imp <> aexp_equiv def
R15358:15363 Coq.Classes.Morphisms <> Proper class
R15366:15375 Coq.Classes.Morphisms <> respectful def
R15387:15396 PL.Imp <> aexp_equiv def
def 15686:15695 <> bexp_equiv
R15705:15708 PL.Imp <> bexp ind
binder 15698:15699 <> b1:216
binder 15701:15702 <> b2:217
R15722:15731 PL.Imp <> equiv def
R15745:15749 PL.Imp <> beval def
R15751:15752 PL.Imp <> b2:217 var
R15734:15738 PL.Imp <> beval def
R15740:15741 PL.Imp <> b1:216 var
prf 15763:15777 <> bexp_equiv_refl
R15780:15788 Coq.Classes.RelationClasses <> Reflexive class
R15790:15799 PL.Imp <> bexp_equiv def
R15818:15826 Coq.Classes.RelationClasses <> Reflexive class
R15829:15838 PL.Imp <> bexp_equiv def
prf 15878:15891 <> bexp_equiv_sym
R15894:15902 Coq.Classes.RelationClasses <> Symmetric class
R15904:15913 PL.Imp <> bexp_equiv def
R15932:15940 Coq.Classes.RelationClasses <> Symmetric class
R15943:15952 PL.Imp <> bexp_equiv def
prf 16005:16020 <> bexp_equiv_trans
R16023:16032 Coq.Classes.RelationClasses <> Transitive class
R16034:16043 PL.Imp <> bexp_equiv def
R16062:16071 Coq.Classes.RelationClasses <> Transitive class
R16074:16083 PL.Imp <> bexp_equiv def
prf 16140:16148 <> BEq_congr
R16153:16158 Coq.Classes.Morphisms <> Proper class
R16203:16205 PL.Imp <> BEq constr
R16171:16175 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16161:16170 PL.Imp <> aexp_equiv def
R16186:16190 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16176:16185 PL.Imp <> aexp_equiv def
R16191:16200 PL.Imp <> bexp_equiv def
R16224:16229 Coq.Classes.Morphisms <> Proper class
R16232:16241 Coq.Classes.Morphisms <> respectful def
R16253:16262 PL.Imp <> aexp_equiv def
R16265:16274 PL.Imp <> bexp_equiv def
prf 16338:16346 <> BLe_congr
R16351:16356 Coq.Classes.Morphisms <> Proper class
R16401:16403 PL.Imp <> BLe constr
R16369:16373 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16359:16368 PL.Imp <> aexp_equiv def
R16384:16388 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16374:16383 PL.Imp <> aexp_equiv def
R16389:16398 PL.Imp <> bexp_equiv def
R16422:16427 Coq.Classes.Morphisms <> Proper class
R16430:16439 Coq.Classes.Morphisms <> respectful def
R16451:16460 PL.Imp <> aexp_equiv def
R16463:16472 PL.Imp <> bexp_equiv def
prf 16536:16545 <> BAnd_congr
R16550:16555 Coq.Classes.Morphisms <> Proper class
R16600:16603 PL.Imp <> BAnd constr
R16568:16572 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16558:16567 PL.Imp <> bexp_equiv def
R16583:16587 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16573:16582 PL.Imp <> bexp_equiv def
R16588:16597 PL.Imp <> bexp_equiv def
R16622:16627 Coq.Classes.Morphisms <> Proper class
R16630:16639 Coq.Classes.Morphisms <> respectful def
R16651:16660 PL.Imp <> bexp_equiv def
prf 16724:16733 <> BNot_congr
R16736:16741 Coq.Classes.Morphisms <> Proper class
R16771:16774 PL.Imp <> BNot constr
R16754:16758 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R16744:16753 PL.Imp <> bexp_equiv def
R16759:16768 PL.Imp <> bexp_equiv def
R16793:16798 Coq.Classes.Morphisms <> Proper class
R16801:16810 Coq.Classes.Morphisms <> respectful def
R16822:16831 PL.Imp <> bexp_equiv def
def 17121:17129 <> com_equiv
R17139:17141 PL.Imp <> com ind
binder 17132:17133 <> c1:218
binder 17135:17136 <> c2:219
R17155:17166 PL.Imp <> equiv def
R17180:17184 PL.Imp <> ceval def
R17186:17187 PL.Imp <> c2:219 var
R17169:17173 PL.Imp <> ceval def
R17175:17176 PL.Imp <> c1:218 var
prf 17198:17211 <> com_equiv_refl
R17214:17222 Coq.Classes.RelationClasses <> Reflexive class
R17224:17232 PL.Imp <> com_equiv def
R17251:17259 Coq.Classes.RelationClasses <> Reflexive class
R17262:17270 PL.Imp <> com_equiv def
prf 17310:17322 <> com_equiv_sym
R17325:17333 Coq.Classes.RelationClasses <> Symmetric class
R17335:17343 PL.Imp <> com_equiv def
R17362:17370 Coq.Classes.RelationClasses <> Symmetric class
R17373:17381 PL.Imp <> com_equiv def
prf 17434:17448 <> com_equiv_trans
R17451:17460 Coq.Classes.RelationClasses <> Transitive class
R17462:17470 PL.Imp <> com_equiv def
R17489:17498 Coq.Classes.RelationClasses <> Transitive class
R17501:17509 PL.Imp <> com_equiv def
prf 17566:17575 <> CAss_congr
R17589:17591 PL.Imp <> var def
binder 17586:17586 <> X:220
R17597:17602 Coq.Classes.Morphisms <> Proper class
R17632:17635 PL.Imp <> CAss constr
R17637:17637 PL.Imp <> X:220 var
R17615:17619 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17605:17614 PL.Imp <> aexp_equiv def
R17620:17628 PL.Imp <> com_equiv def
R17657:17662 Coq.Classes.Morphisms <> Proper class
R17665:17674 Coq.Classes.Morphisms <> respectful def
R17686:17695 PL.Imp <> aexp_equiv def
R17698:17706 PL.Imp <> com_equiv def
R17709:17720 PL.Imp <> equiv def
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17772:17781 PL.Imp <> ceval_CAss thm
R17793:17802 PL.Imp <> equiv def
prf 17872:17881 <> CSeq_congr
R17884:17889 Coq.Classes.Morphisms <> Proper class
R17931:17934 PL.Imp <> CSeq constr
R17901:17905 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17892:17900 PL.Imp <> com_equiv def
R17915:17919 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R17906:17914 PL.Imp <> com_equiv def
R17920:17928 PL.Imp <> com_equiv def
R17953:17958 Coq.Classes.Morphisms <> Proper class
R17961:17970 Coq.Classes.Morphisms <> respectful def
R17982:17990 PL.Imp <> com_equiv def
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
R18033:18042 PL.Imp <> ceval_CSeq thm
prf 18089:18097 <> CIf_congr
R18102:18107 Coq.Classes.Morphisms <> Proper class
R18164:18166 PL.Imp <> CIf constr
R18120:18124 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18110:18119 PL.Imp <> bexp_equiv def
R18134:18138 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18125:18133 PL.Imp <> com_equiv def
R18148:18152 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18139:18147 PL.Imp <> com_equiv def
R18153:18161 PL.Imp <> com_equiv def
R18185:18190 Coq.Classes.Morphisms <> Proper class
R18193:18202 Coq.Classes.Morphisms <> respectful def
R18214:18223 PL.Imp <> bexp_equiv def
R18226:18234 PL.Imp <> com_equiv def
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18284:18292 PL.Imp <> ceval_CIf thm
R18304:18309 PL.Imp <> if_sem def
prf 18369:18380 <> CWhile_congr
R18385:18390 Coq.Classes.Morphisms <> Proper class
R18433:18438 PL.Imp <> CWhile constr
R18403:18407 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18393:18402 PL.Imp <> bexp_equiv def
R18417:18421 Coq.Classes.Morphisms ProperNotations ::signature_scope:x_'==>'_x not
R18408:18416 PL.Imp <> com_equiv def
R18422:18430 PL.Imp <> com_equiv def
R18457:18462 Coq.Classes.Morphisms <> Proper class
R18465:18474 Coq.Classes.Morphisms <> respectful def
R18486:18495 PL.Imp <> bexp_equiv def
R18498:18506 PL.Imp <> com_equiv def
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18545:18556 PL.Imp <> ceval_CWhile thm
R18568:18575 PL.Imp <> loop_sem def
R18586:18606 PL.Imp <> Rel_equiv_omega_union thm
R18586:18606 PL.Imp <> Rel_equiv_omega_union thm
prf 18726:18743 <> loop_sem_unrolling
binder 18753:18753 <> b:221
R18764:18767 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18773:18776 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R18768:18772 PL.Imp <> state def
R18759:18763 PL.Imp <> state def
binder 18756:18756 <> R:222
R18786:18797 PL.Imp <> equiv def
R18815:18820 PL.Imp <> if_sem def
R18857:18865 PL.Imp <> id def
R18825:18837 PL.Imp <> concat def
R18842:18849 PL.Imp <> loop_sem def
R18853:18853 PL.Imp <> R:222 var
R18851:18851 PL.Imp <> b:221 var
R18839:18839 PL.Imp <> R:222 var
R18822:18822 PL.Imp <> b:221 var
R18800:18807 PL.Imp <> loop_sem def
R18811:18811 PL.Imp <> R:222 var
R18809:18809 PL.Imp <> b:221 var
R18895:18906 PL.Imp <> equiv def
R18934:18936 Coq.Init.Logic <> iff def
R18965:18972 PL.Imp <> loop_sem def
R18975:18992 PL.Imp <> omega_union def
R19072:19077 PL.Imp <> if_sem def
R19080:19091 PL.Imp <> union def
R19127:19139 PL.Imp <> concat def
R19142:19150 PL.Imp <> id def
R19234:19239 PL.Imp <> if_sem def
R19242:19253 PL.Imp <> union def
R19281:19293 PL.Imp <> concat def
R19314:19326 PL.Imp <> concat def
R19468:19475 PL.Imp <> loop_sem def
R19478:19495 PL.Imp <> omega_union def
R19541:19546 PL.Imp <> if_sem def
R19549:19553 Coq.Relations.Relation_Operators <> union def
R19572:19579 PL.Imp <> loop_sem def
R19582:19599 PL.Imp <> omega_union def
R19673:19685 PL.Imp <> concat def
R19688:19696 PL.Imp <> id def
R19787:19799 PL.Imp <> concat def
R19855:19867 PL.Imp <> concat def
R19919:19926 PL.Imp <> loop_sem def
R19929:19946 PL.Imp <> omega_union def
R19993:19993 Coq.Init.Datatypes <> S constr
R19993:19993 Coq.Init.Datatypes <> S constr
R20021:20033 PL.Imp <> concat def
R20089:20101 PL.Imp <> concat def
prf 20164:20177 <> loop_unrolling
binder 20188:20188 <> b:223
binder 20190:20190 <> c:224
R20195:20203 PL.Imp <> com_equiv def
R20238:20240 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20242:20248 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20275:20281 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20286:20291 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R20241:20241 PL.Imp <> b:223 var
R20250:20253 PL.Imp <> ::imp_scope:x_';;'_x not
R20249:20249 PL.Imp <> c:224 var
R20254:20259 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20261:20264 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20266:20274 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20260:20260 PL.Imp <> b:223 var
R20265:20265 PL.Imp <> c:224 var
R20282:20285 PL.Imp <> ::imp_scope:'Skip' not
R20210:20215 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20217:20220 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20222:20230 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R20216:20216 PL.Imp <> b:223 var
R20221:20221 PL.Imp <> c:224 var
R20321:20329 PL.Imp <> com_equiv def
R20342:20350 PL.Imp <> ceval_CIf thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20342:20350 PL.Imp <> ceval_CIf thm
R20342:20350 PL.Imp <> ceval_CIf thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20353:20362 PL.Imp <> ceval_CSeq thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20365:20375 PL.Imp <> ceval_CSkip thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20388:20399 PL.Imp <> ceval_CWhile thm
R20410:20427 PL.Imp <> loop_sem_unrolling thm
R20410:20427 PL.Imp <> loop_sem_unrolling thm
prf 20442:20450 <> seq_assoc
binder 20461:20462 <> c1:225
binder 20464:20465 <> c2:226
binder 20467:20468 <> c3:227
R20473:20481 PL.Imp <> com_equiv def
R20501:20503 PL.Imp <> ::imp_scope:x_';;'_x not
R20510:20510 PL.Imp <> ::imp_scope:x_';;'_x not
R20499:20500 PL.Imp <> c1:225 var
R20506:20507 PL.Imp <> ::imp_scope:x_';;'_x not
R20504:20505 PL.Imp <> c2:226 var
R20508:20509 PL.Imp <> c3:227 var
R20484:20484 PL.Imp <> ::imp_scope:x_';;'_x not
R20491:20493 PL.Imp <> ::imp_scope:x_';;'_x not
R20487:20488 PL.Imp <> ::imp_scope:x_';;'_x not
R20485:20486 PL.Imp <> c1:225 var
R20489:20490 PL.Imp <> c2:226 var
R20494:20495 PL.Imp <> c3:227 var
R20540:20548 PL.Imp <> com_equiv def
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20563:20572 PL.Imp <> ceval_CSeq thm
R20583:20598 PL.Imp <> Rel_concat_assoc thm
R20583:20598 PL.Imp <> Rel_concat_assoc thm
ind 20756:20764 <> aexp_halt
constr 20787:20792 <> AH_num
R20771:20774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20767:20770 PL.Imp <> aexp ind
binder 20803:20803 <> n:230
R20806:20814 PL.Imp <> aexp_halt:228 ind
R20817:20820 PL.Imp <> ANum constr
R20822:20822 PL.Imp <> n:230 var
ind 20837:20841 <> astep
constr 20882:20886 <> AS_Id
constr 20953:20960 <> AS_Plus1
constr 21074:21081 <> AS_Plus2
constr 21217:21223 <> AS_Plus
constr 21317:21325 <> AS_Minus1
constr 21441:21449 <> AS_Minus2
constr 21587:21594 <> AS_Minus
constr 21689:21696 <> AS_Mult1
constr 21810:21817 <> AS_Mult2
constr 21953:21959 <> AS_Mult
R20850:20853 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20858:20861 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20866:20869 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R20862:20865 PL.Imp <> aexp ind
R20854:20857 PL.Imp <> aexp ind
R20845:20849 PL.Imp <> state def
binder 20897:20898 <> st:233
binder 20900:20900 <> X:234
R20909:20913 PL.Imp <> astep:231 ind
R20935:20938 PL.Imp <> ANum constr
R20941:20942 PL.Imp <> st:233 var
R20944:20944 PL.Imp <> X:234 var
R20927:20929 PL.Imp <> AId constr
R20931:20931 PL.Imp <> X:234 var
R20915:20916 PL.Imp <> st:233 var
binder 20971:20972 <> st:235
binder 20974:20975 <> a1:236
binder 20977:20979 <> a1':237
binder 20981:20982 <> a2:238
R21014:21023 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21024:21028 PL.Imp <> astep:231 ind
R21056:21060 PL.Imp <> APlus constr
R21066:21067 PL.Imp <> a2:238 var
R21062:21064 PL.Imp <> a1':237 var
R21042:21046 PL.Imp <> APlus constr
R21051:21052 PL.Imp <> a2:238 var
R21048:21049 PL.Imp <> a1:236 var
R21030:21031 PL.Imp <> st:235 var
R20991:20995 PL.Imp <> astep:231 ind
R21011:21013 PL.Imp <> a1':237 var
R21008:21009 PL.Imp <> a1:236 var
R20997:20998 PL.Imp <> st:235 var
binder 21092:21093 <> st:239
binder 21095:21096 <> a1:240
binder 21098:21099 <> a2:241
binder 21101:21103 <> a2':242
R21124:21133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21157:21166 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21167:21171 PL.Imp <> astep:231 ind
R21199:21203 PL.Imp <> APlus constr
R21208:21210 PL.Imp <> a2':242 var
R21205:21206 PL.Imp <> a1:240 var
R21185:21189 PL.Imp <> APlus constr
R21194:21195 PL.Imp <> a2:241 var
R21191:21192 PL.Imp <> a1:240 var
R21173:21174 PL.Imp <> st:239 var
R21134:21138 PL.Imp <> astep:231 ind
R21154:21156 PL.Imp <> a2':242 var
R21151:21152 PL.Imp <> a2:241 var
R21140:21141 PL.Imp <> st:239 var
R21112:21120 PL.Imp <> aexp_halt ind
R21122:21123 PL.Imp <> a1:240 var
binder 21234:21235 <> st:243
binder 21237:21238 <> n1:244
binder 21240:21241 <> n2:245
R21250:21254 PL.Imp <> astep:231 ind
R21296:21299 PL.Imp <> ANum constr
R21304:21306 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R21302:21303 PL.Imp <> n1:244 var
R21307:21308 PL.Imp <> n2:245 var
R21268:21272 PL.Imp <> APlus constr
R21285:21288 PL.Imp <> ANum constr
R21290:21291 PL.Imp <> n2:245 var
R21275:21278 PL.Imp <> ANum constr
R21280:21281 PL.Imp <> n1:244 var
R21256:21257 PL.Imp <> st:243 var
binder 21336:21337 <> st:246
binder 21339:21340 <> a1:247
binder 21342:21344 <> a1':248
binder 21346:21347 <> a2:249
R21379:21388 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21389:21393 PL.Imp <> astep:231 ind
R21422:21427 PL.Imp <> AMinus constr
R21433:21434 PL.Imp <> a2:249 var
R21429:21431 PL.Imp <> a1':248 var
R21407:21412 PL.Imp <> AMinus constr
R21417:21418 PL.Imp <> a2:249 var
R21414:21415 PL.Imp <> a1:247 var
R21395:21396 PL.Imp <> st:246 var
R21356:21360 PL.Imp <> astep:231 ind
R21376:21378 PL.Imp <> a1':248 var
R21373:21374 PL.Imp <> a1:247 var
R21362:21363 PL.Imp <> st:246 var
binder 21460:21461 <> st:250
binder 21463:21464 <> a1:251
binder 21466:21467 <> a2:252
binder 21469:21471 <> a2':253
R21492:21501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21525:21534 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21535:21539 PL.Imp <> astep:231 ind
R21568:21573 PL.Imp <> AMinus constr
R21578:21580 PL.Imp <> a2':253 var
R21575:21576 PL.Imp <> a1:251 var
R21553:21558 PL.Imp <> AMinus constr
R21563:21564 PL.Imp <> a2:252 var
R21560:21561 PL.Imp <> a1:251 var
R21541:21542 PL.Imp <> st:250 var
R21502:21506 PL.Imp <> astep:231 ind
R21522:21524 PL.Imp <> a2':253 var
R21519:21520 PL.Imp <> a2:252 var
R21508:21509 PL.Imp <> st:250 var
R21480:21488 PL.Imp <> aexp_halt ind
R21490:21491 PL.Imp <> a1:251 var
binder 21605:21606 <> st:254
binder 21608:21609 <> n1:255
binder 21611:21612 <> n2:256
R21621:21625 PL.Imp <> astep:231 ind
R21668:21671 PL.Imp <> ANum constr
R21676:21678 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R21674:21675 PL.Imp <> n1:255 var
R21679:21680 PL.Imp <> n2:256 var
R21639:21644 PL.Imp <> AMinus constr
R21657:21660 PL.Imp <> ANum constr
R21662:21663 PL.Imp <> n2:256 var
R21647:21650 PL.Imp <> ANum constr
R21652:21653 PL.Imp <> n1:255 var
R21627:21628 PL.Imp <> st:254 var
binder 21707:21708 <> st:257
binder 21710:21711 <> a1:258
binder 21713:21715 <> a1':259
binder 21717:21718 <> a2:260
R21750:21759 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21760:21764 PL.Imp <> astep:231 ind
R21792:21796 PL.Imp <> AMult constr
R21802:21803 PL.Imp <> a2:260 var
R21798:21800 PL.Imp <> a1':259 var
R21778:21782 PL.Imp <> AMult constr
R21787:21788 PL.Imp <> a2:260 var
R21784:21785 PL.Imp <> a1:258 var
R21766:21767 PL.Imp <> st:257 var
R21727:21731 PL.Imp <> astep:231 ind
R21747:21749 PL.Imp <> a1':259 var
R21744:21745 PL.Imp <> a1:258 var
R21733:21734 PL.Imp <> st:257 var
binder 21828:21829 <> st:261
binder 21831:21832 <> a1:262
binder 21834:21835 <> a2:263
binder 21837:21839 <> a2':264
R21860:21869 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21893:21902 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R21903:21907 PL.Imp <> astep:231 ind
R21935:21939 PL.Imp <> AMult constr
R21944:21946 PL.Imp <> a2':264 var
R21941:21942 PL.Imp <> a1:262 var
R21921:21925 PL.Imp <> AMult constr
R21930:21931 PL.Imp <> a2:263 var
R21927:21928 PL.Imp <> a1:262 var
R21909:21910 PL.Imp <> st:261 var
R21870:21874 PL.Imp <> astep:231 ind
R21890:21892 PL.Imp <> a2':264 var
R21887:21888 PL.Imp <> a2:263 var
R21876:21877 PL.Imp <> st:261 var
R21848:21856 PL.Imp <> aexp_halt ind
R21858:21859 PL.Imp <> a1:262 var
binder 21970:21971 <> st:265
binder 21973:21974 <> n1:266
binder 21976:21977 <> n2:267
R21986:21990 PL.Imp <> astep:231 ind
R22032:22035 PL.Imp <> ANum constr
R22040:22042 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R22038:22039 PL.Imp <> n1:266 var
R22043:22044 PL.Imp <> n2:267 var
R22004:22008 PL.Imp <> AMult constr
R22021:22024 PL.Imp <> ANum constr
R22026:22027 PL.Imp <> n2:267 var
R22011:22014 PL.Imp <> ANum constr
R22016:22017 PL.Imp <> n1:266 var
R21992:21993 PL.Imp <> st:265 var
ind 22060:22068 <> bexp_halt
constr 22091:22097 <> BH_True
constr 22121:22128 <> BH_False
R22075:22078 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22071:22074 PL.Imp <> bexp ind
R22101:22109 PL.Imp <> bexp_halt:268 ind
R22111:22115 PL.Imp <> BTrue constr
R22132:22140 PL.Imp <> bexp_halt:268 ind
R22142:22147 PL.Imp <> BFalse constr
ind 22161:22165 <> bstep
constr 22207:22212 <> BS_Eq1
constr 22322:22327 <> BS_Eq2
constr 22459:22468 <> BS_Eq_True
constr 22565:22575 <> BS_Eq_False
constr 22675:22680 <> BS_Le1
constr 22790:22795 <> BS_Le2
constr 22927:22936 <> BS_Le_True
constr 23034:23044 <> BS_Le_False
constr 23143:23152 <> BS_NotStep
constr 23255:23264 <> BS_NotTrue
constr 23326:23336 <> BS_NotFalse
constr 23399:23408 <> BS_AndStep
constr 23519:23528 <> BS_AndTrue
constr 23588:23598 <> BS_AndFalse
R22174:22177 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22182:22185 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22190:22193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22186:22189 PL.Imp <> bexp ind
R22178:22181 PL.Imp <> bexp ind
R22169:22173 PL.Imp <> state def
binder 22223:22224 <> st:272
binder 22226:22227 <> a1:273
binder 22229:22231 <> a1':274
binder 22233:22234 <> a2:275
R22266:22275 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22276:22280 PL.Imp <> bstep:270 ind
R22306:22308 PL.Imp <> BEq constr
R22314:22315 PL.Imp <> a2:275 var
R22310:22312 PL.Imp <> a1':274 var
R22294:22296 PL.Imp <> BEq constr
R22301:22302 PL.Imp <> a2:275 var
R22298:22299 PL.Imp <> a1:273 var
R22282:22283 PL.Imp <> st:272 var
R22243:22247 PL.Imp <> astep ind
R22263:22265 PL.Imp <> a1':274 var
R22260:22261 PL.Imp <> a1:273 var
R22249:22250 PL.Imp <> st:272 var
binder 22338:22339 <> st:276
binder 22341:22342 <> a1:277
binder 22344:22345 <> a2:278
binder 22347:22349 <> a2':279
R22370:22379 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22403:22412 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22413:22417 PL.Imp <> bstep:270 ind
R22443:22445 PL.Imp <> BEq constr
R22450:22452 PL.Imp <> a2':279 var
R22447:22448 PL.Imp <> a1:277 var
R22431:22433 PL.Imp <> BEq constr
R22438:22439 PL.Imp <> a2:278 var
R22435:22436 PL.Imp <> a1:277 var
R22419:22420 PL.Imp <> st:276 var
R22380:22384 PL.Imp <> astep ind
R22400:22402 PL.Imp <> a2':279 var
R22397:22398 PL.Imp <> a2:278 var
R22386:22387 PL.Imp <> st:276 var
R22358:22366 PL.Imp <> aexp_halt ind
R22368:22369 PL.Imp <> a1:277 var
binder 22479:22480 <> st:280
binder 22482:22483 <> n1:281
binder 22485:22486 <> n2:282
R22502:22511 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22512:22516 PL.Imp <> bstep:270 ind
R22555:22559 PL.Imp <> BTrue constr
R22530:22532 PL.Imp <> BEq constr
R22545:22548 PL.Imp <> ANum constr
R22550:22551 PL.Imp <> n2:282 var
R22535:22538 PL.Imp <> ANum constr
R22540:22541 PL.Imp <> n1:281 var
R22518:22519 PL.Imp <> st:280 var
R22497:22499 Coq.Init.Logic <> ::type_scope:x_'='_x not
R22495:22496 PL.Imp <> n1:281 var
R22500:22501 PL.Imp <> n2:282 var
binder 22586:22587 <> st:283
binder 22589:22590 <> n1:284
binder 22592:22593 <> n2:285
R22610:22619 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22620:22624 PL.Imp <> bstep:270 ind
R22663:22668 PL.Imp <> BFalse constr
R22638:22640 PL.Imp <> BEq constr
R22653:22656 PL.Imp <> ANum constr
R22658:22659 PL.Imp <> n2:285 var
R22643:22646 PL.Imp <> ANum constr
R22648:22649 PL.Imp <> n1:284 var
R22626:22627 PL.Imp <> st:283 var
R22604:22607 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R22602:22603 PL.Imp <> n1:284 var
R22608:22609 PL.Imp <> n2:285 var
binder 22691:22692 <> st:286
binder 22694:22695 <> a1:287
binder 22697:22699 <> a1':288
binder 22701:22702 <> a2:289
R22734:22743 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22744:22748 PL.Imp <> bstep:270 ind
R22774:22776 PL.Imp <> BLe constr
R22782:22783 PL.Imp <> a2:289 var
R22778:22780 PL.Imp <> a1':288 var
R22762:22764 PL.Imp <> BLe constr
R22769:22770 PL.Imp <> a2:289 var
R22766:22767 PL.Imp <> a1:287 var
R22750:22751 PL.Imp <> st:286 var
R22711:22715 PL.Imp <> astep ind
R22731:22733 PL.Imp <> a1':288 var
R22728:22729 PL.Imp <> a1:287 var
R22717:22718 PL.Imp <> st:286 var
binder 22806:22807 <> st:290
binder 22809:22810 <> a1:291
binder 22812:22813 <> a2:292
binder 22815:22817 <> a2':293
R22838:22847 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22871:22880 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22881:22885 PL.Imp <> bstep:270 ind
R22911:22913 PL.Imp <> BLe constr
R22918:22920 PL.Imp <> a2':293 var
R22915:22916 PL.Imp <> a1:291 var
R22899:22901 PL.Imp <> BLe constr
R22906:22907 PL.Imp <> a2:292 var
R22903:22904 PL.Imp <> a1:291 var
R22887:22888 PL.Imp <> st:290 var
R22848:22852 PL.Imp <> astep ind
R22868:22870 PL.Imp <> a2':293 var
R22865:22866 PL.Imp <> a2:292 var
R22854:22855 PL.Imp <> st:290 var
R22826:22834 PL.Imp <> aexp_halt ind
R22836:22837 PL.Imp <> a1:291 var
binder 22947:22948 <> st:294
binder 22950:22951 <> n1:295
binder 22953:22954 <> n2:296
R22971:22980 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R22981:22985 PL.Imp <> bstep:270 ind
R23024:23028 PL.Imp <> BTrue constr
R22999:23001 PL.Imp <> BLe constr
R23014:23017 PL.Imp <> ANum constr
R23019:23020 PL.Imp <> n2:296 var
R23004:23007 PL.Imp <> ANum constr
R23009:23010 PL.Imp <> n1:295 var
R22987:22988 PL.Imp <> st:294 var
R22965:22968 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R22963:22964 PL.Imp <> n1:295 var
R22969:22970 PL.Imp <> n2:296 var
binder 23055:23056 <> st:297
binder 23058:23059 <> n1:298
binder 23061:23062 <> n2:299
R23078:23087 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23088:23092 PL.Imp <> bstep:270 ind
R23131:23136 PL.Imp <> BFalse constr
R23106:23108 PL.Imp <> BLe constr
R23121:23124 PL.Imp <> ANum constr
R23126:23127 PL.Imp <> n2:299 var
R23111:23114 PL.Imp <> ANum constr
R23116:23117 PL.Imp <> n1:298 var
R23094:23095 PL.Imp <> st:297 var
R23073:23075 Coq.ZArith.BinInt <> ::Z_scope:x_'>'_x not
R23071:23072 PL.Imp <> n1:298 var
R23076:23077 PL.Imp <> n2:299 var
binder 23163:23164 <> st:300
binder 23166:23167 <> b1:301
binder 23169:23171 <> b1':302
R23203:23212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23213:23217 PL.Imp <> bstep:270 ind
R23241:23244 PL.Imp <> BNot constr
R23246:23248 PL.Imp <> b1':302 var
R23231:23234 PL.Imp <> BNot constr
R23236:23237 PL.Imp <> b1:301 var
R23219:23220 PL.Imp <> st:300 var
R23180:23184 PL.Imp <> bstep:270 ind
R23200:23202 PL.Imp <> b1':302 var
R23197:23198 PL.Imp <> b1:301 var
R23186:23187 PL.Imp <> st:300 var
binder 23275:23276 <> st:303
R23285:23289 PL.Imp <> bstep:270 ind
R23315:23320 PL.Imp <> BFalse constr
R23303:23306 PL.Imp <> BNot constr
R23308:23312 PL.Imp <> BTrue constr
R23291:23292 PL.Imp <> st:303 var
binder 23347:23348 <> st:304
R23357:23361 PL.Imp <> bstep:270 ind
R23388:23392 PL.Imp <> BTrue constr
R23375:23378 PL.Imp <> BNot constr
R23380:23385 PL.Imp <> BFalse constr
R23363:23364 PL.Imp <> st:304 var
binder 23419:23420 <> st:305
binder 23422:23423 <> b1:306
binder 23425:23427 <> b1':307
binder 23429:23430 <> b2:308
R23462:23471 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23472:23476 PL.Imp <> bstep:270 ind
R23502:23505 PL.Imp <> BAnd constr
R23511:23512 PL.Imp <> b2:308 var
R23507:23509 PL.Imp <> b1':307 var
R23489:23492 PL.Imp <> BAnd constr
R23497:23498 PL.Imp <> b2:308 var
R23494:23495 PL.Imp <> b1:306 var
R23478:23479 PL.Imp <> st:305 var
R23439:23443 PL.Imp <> bstep:270 ind
R23459:23461 PL.Imp <> b1':307 var
R23456:23457 PL.Imp <> b1:306 var
R23445:23446 PL.Imp <> st:305 var
binder 23539:23540 <> st:309
binder 23542:23542 <> b:310
R23551:23555 PL.Imp <> bstep:270 ind
R23582:23582 PL.Imp <> b:310 var
R23568:23571 PL.Imp <> BAnd constr
R23579:23579 PL.Imp <> b:310 var
R23573:23577 PL.Imp <> BTrue constr
R23557:23558 PL.Imp <> st:309 var
binder 23609:23610 <> st:311
binder 23612:23612 <> b:312
R23621:23625 PL.Imp <> bstep:270 ind
R23653:23658 PL.Imp <> BFalse constr
R23638:23641 PL.Imp <> BAnd constr
R23650:23650 PL.Imp <> b:312 var
R23643:23648 PL.Imp <> BFalse constr
R23627:23628 PL.Imp <> st:311 var
sec 23670:23674 <> cstep
ind 23711:23715 <> cstep
constr 23765:23774 <> CS_AssStep
constr 23866:23871 <> CS_Ass
constr 24010:24019 <> CS_SeqStep
constr 24132:24137 <> CS_Seq
constr 24197:24205 <> CS_IfStep
constr 24355:24363 <> CS_IfTrue
constr 24446:24455 <> CS_IfFalse
constr 24539:24546 <> CS_While
R23719:23719 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23731:23735 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23736:23736 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23748:23752 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23740:23742 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23737:23739 PL.Imp <> com ind
R23743:23747 PL.Imp <> state def
R23723:23725 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R23720:23722 PL.Imp <> com ind
R23726:23730 PL.Imp <> state def
binder 23785:23786 <> st:315
binder 23788:23788 <> X:316
binder 23790:23790 <> a:317
binder 23792:23793 <> a':318
R23815:23824 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23825:23829 PL.Imp <> cstep:313 ind
R23846:23846 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23856:23857 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23860:23860 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23847:23850 PL.Imp <> CAss constr
R23854:23855 PL.Imp <> a':318 var
R23852:23852 PL.Imp <> X:316 var
R23858:23859 PL.Imp <> st:315 var
R23831:23831 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23840:23841 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23844:23844 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23832:23835 PL.Imp <> CAss constr
R23839:23839 PL.Imp <> a:317 var
R23837:23837 PL.Imp <> X:316 var
R23842:23843 PL.Imp <> st:315 var
R23802:23806 PL.Imp <> astep ind
R23813:23814 PL.Imp <> a':318 var
R23811:23811 PL.Imp <> a:317 var
R23808:23809 PL.Imp <> st:315 var
binder 23882:23884 <> st1:319
binder 23886:23888 <> st2:320
binder 23890:23890 <> X:321
binder 23892:23892 <> n:322
R23910:23919 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23920:23920 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23954:23964 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23965:23969 PL.Imp <> cstep:313 ind
R23994:23994 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23999:24000 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24004:24004 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23995:23998 PL.Imp <> ::imp_scope:'Skip' not
R24001:24003 PL.Imp <> st2:320 var
R23971:23971 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23987:23988 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23992:23992 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R23972:23975 PL.Imp <> CAss constr
R23980:23983 PL.Imp <> ANum constr
R23985:23985 PL.Imp <> n:322 var
R23977:23977 PL.Imp <> X:321 var
R23989:23991 PL.Imp <> st1:319 var
binder 23928:23928 <> Y:323
R23937:23940 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R23946:23948 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23941:23943 PL.Imp <> st1:319 var
R23945:23945 PL.Imp <> Y:323 var
R23949:23951 PL.Imp <> st2:320 var
R23953:23953 PL.Imp <> Y:323 var
R23932:23935 Coq.Init.Logic <> ::type_scope:x_'<>'_x not
R23931:23931 PL.Imp <> X:321 var
R23936:23936 PL.Imp <> Y:323 var
R23906:23908 Coq.Init.Logic <> ::type_scope:x_'='_x not
R23901:23903 PL.Imp <> st2:320 var
R23905:23905 PL.Imp <> X:321 var
R23909:23909 PL.Imp <> n:322 var
binder 24030:24031 <> st:324
binder 24033:24034 <> c1:325
binder 24036:24038 <> c1':326
binder 24040:24042 <> st':327
binder 24044:24045 <> c2:328
R24079:24088 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24089:24093 PL.Imp <> cstep:313 ind
R24111:24111 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24121:24122 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24126:24126 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24115:24118 PL.Imp <> ::imp_scope:x_';;'_x not
R24112:24114 PL.Imp <> c1':326 var
R24119:24120 PL.Imp <> c2:328 var
R24123:24125 PL.Imp <> st':327 var
R24095:24095 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24104:24106 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24109:24109 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24098:24101 PL.Imp <> ::imp_scope:x_';;'_x not
R24096:24097 PL.Imp <> c1:325 var
R24102:24103 PL.Imp <> c2:328 var
R24107:24108 PL.Imp <> st:324 var
R24054:24058 PL.Imp <> cstep:313 ind
R24069:24069 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24073:24074 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24078:24078 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24070:24072 PL.Imp <> c1':326 var
R24075:24077 PL.Imp <> st':327 var
R24060:24060 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24063:24064 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24067:24067 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24061:24062 PL.Imp <> c1:325 var
R24065:24066 PL.Imp <> st:324 var
binder 24148:24149 <> st:329
binder 24151:24152 <> c2:330
R24161:24165 PL.Imp <> cstep:313 ind
R24184:24184 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24187:24188 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24191:24191 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24185:24186 PL.Imp <> c2:330 var
R24189:24190 PL.Imp <> st:329 var
R24167:24167 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24178:24179 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24182:24182 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24172:24175 PL.Imp <> ::imp_scope:x_';;'_x not
R24168:24171 PL.Imp <> ::imp_scope:'Skip' not
R24176:24177 PL.Imp <> c2:330 var
R24180:24181 PL.Imp <> st:329 var
binder 24216:24217 <> st:331
binder 24219:24219 <> b:332
binder 24221:24222 <> b':333
binder 24224:24225 <> c1:334
binder 24227:24228 <> c2:335
R24250:24259 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24260:24264 PL.Imp <> cstep:313 ind
R24316:24316 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24345:24346 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24349:24349 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24317:24319 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24322:24328 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24331:24336 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24339:24344 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24320:24321 PL.Imp <> b':333 var
R24329:24330 PL.Imp <> c1:334 var
R24337:24338 PL.Imp <> c2:335 var
R24347:24348 PL.Imp <> st:331 var
R24274:24274 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24302:24303 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24306:24306 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24275:24277 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24279:24285 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24288:24293 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24296:24301 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24278:24278 PL.Imp <> b:332 var
R24286:24287 PL.Imp <> c1:334 var
R24294:24295 PL.Imp <> c2:335 var
R24304:24305 PL.Imp <> st:331 var
R24237:24241 PL.Imp <> bstep ind
R24248:24249 PL.Imp <> b':333 var
R24246:24246 PL.Imp <> b:332 var
R24243:24244 PL.Imp <> st:331 var
binder 24374:24375 <> st:336
binder 24377:24378 <> c1:337
binder 24380:24381 <> c2:338
R24390:24394 PL.Imp <> cstep:313 ind
R24433:24433 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24436:24437 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24440:24440 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24434:24435 PL.Imp <> c1:337 var
R24438:24439 PL.Imp <> st:336 var
R24396:24396 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24427:24428 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24431:24431 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24397:24399 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24405:24410 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24413:24418 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24421:24426 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24400:24404 PL.Imp <> BTrue constr
R24411:24412 PL.Imp <> c1:337 var
R24419:24420 PL.Imp <> c2:338 var
R24429:24430 PL.Imp <> st:336 var
binder 24466:24467 <> st:339
binder 24469:24470 <> c1:340
binder 24472:24473 <> c2:341
R24482:24486 PL.Imp <> cstep:313 ind
R24526:24526 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24529:24530 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24533:24533 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24527:24528 PL.Imp <> c2:341 var
R24531:24532 PL.Imp <> st:339 var
R24488:24488 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24520:24521 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24524:24524 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24489:24491 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24498:24503 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24506:24511 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24514:24519 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24492:24497 PL.Imp <> BFalse constr
R24504:24505 PL.Imp <> c1:340 var
R24512:24513 PL.Imp <> c2:341 var
R24522:24523 PL.Imp <> st:339 var
binder 24557:24558 <> st:342
binder 24560:24560 <> b:343
binder 24562:24562 <> c:344
R24571:24575 PL.Imp <> cstep:313 ind
R24621:24621 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24675:24676 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24679:24679 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24622:24624 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24626:24632 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24658:24664 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24669:24674 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R24625:24625 PL.Imp <> b:343 var
R24634:24636 PL.Imp <> ::imp_scope:x_';;'_x not
R24633:24633 PL.Imp <> c:344 var
R24637:24642 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24644:24647 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24649:24657 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24643:24643 PL.Imp <> b:343 var
R24648:24648 PL.Imp <> c:344 var
R24665:24668 PL.Imp <> ::imp_scope:'Skip' not
R24677:24678 PL.Imp <> st:342 var
R24585:24585 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24607:24608 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24611:24611 Coq.Init.Datatypes <> ::core_scope:'('_x_','_x_','_'..'_','_x_')' not
R24586:24591 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24593:24596 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24598:24606 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R24592:24592 PL.Imp <> b:343 var
R24597:24597 PL.Imp <> c:344 var
R24609:24610 PL.Imp <> st:342 var
R24687:24691 PL.Imp cstep <> sec
def 24706:24716 <> multi_astep
R24723:24727 PL.Imp <> state def
binder 24719:24720 <> st:345
R24735:24738 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24743:24746 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24739:24742 PL.Imp <> aexp ind
R24731:24734 PL.Imp <> aexp ind
R24755:24769 PL.RTClosure <> clos_refl_trans ind
R24772:24776 PL.Imp <> astep ind
R24778:24779 PL.Imp <> st:345 var
def 24795:24805 <> multi_bstep
R24812:24816 PL.Imp <> state def
binder 24808:24809 <> st:346
R24824:24827 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24832:24835 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24828:24831 PL.Imp <> bexp ind
R24820:24823 PL.Imp <> bexp ind
R24844:24858 PL.RTClosure <> clos_refl_trans ind
R24861:24865 PL.Imp <> bstep ind
R24867:24868 PL.Imp <> st:346 var
def 24884:24894 <> multi_cstep
R24908:24911 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24923:24926 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R24915:24917 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R24912:24914 PL.Imp <> com ind
R24918:24922 PL.Imp <> state def
R24900:24902 Coq.Init.Datatypes <> ::type_scope:x_'*'_x not
R24897:24899 PL.Imp <> com ind
R24903:24907 PL.Imp <> state def
R24935:24949 PL.RTClosure <> clos_refl_trans ind
R24951:24955 PL.Imp <> cstep ind
mod 25151:25161 <> Assertion_S
ind 25175:25178 Assertion_S term
constr 25194:25197 Assertion_S TNum
constr 25211:25217 Assertion_S TDenote
constr 25234:25238 Assertion_S TPlus
constr 25259:25264 Assertion_S TMinus
constr 25285:25289 Assertion_S TMult
R25204:25204 Coq.Numbers.BinNums <> Z ind
binder 25200:25200 <> n:349
R25224:25227 PL.Imp <> aexp ind
binder 25220:25220 <> a:350
R25249:25252 PL.Imp <> term:347 ind
binder 25241:25242 <> t1:351
binder 25244:25245 <> t2:352
R25275:25278 PL.Imp <> term:347 ind
binder 25267:25268 <> t1:353
binder 25270:25271 <> t2:354
R25300:25303 PL.Imp <> term:347 ind
binder 25292:25293 <> t1:355
binder 25295:25296 <> t2:356
R25311:25336 PL.Imp Assertion_S TNum constr
R25431:25435 PL.Imp Assertion_S TPlus constr
not 25419:25419 Assertion_S ::term_scope:x_'+'_x
R25511:25516 PL.Imp Assertion_S TMinus constr
not 25499:25499 Assertion_S ::term_scope:x_'-'_x
R25592:25596 PL.Imp Assertion_S TMult constr
not 25580:25580 Assertion_S ::term_scope:x_'*'_x
R25674:25680 PL.Imp Assertion_S TDenote constr
not 25660:25660 Assertion_S ::term_scope:'{['_x_']}'
ind 25750:25758 Assertion_S Assertion
constr 25774:25776 Assertion_S DLe
constr 25797:25799 Assertion_S DLt
constr 25820:25822 Assertion_S DEq
constr 25843:25846 Assertion_S DInj
constr 25862:25866 Assertion_S DProp
constr 25882:25884 Assertion_S DOr
constr 25910:25913 Assertion_S DAnd
constr 25939:25942 Assertion_S DNot
constr 25963:25969 Assertion_S DExists
constr 25995:26001 Assertion_S DForall
R25787:25790 PL.Imp Assertion_S term ind
binder 25779:25780 <> t1:359
binder 25782:25783 <> t2:360
R25810:25813 PL.Imp Assertion_S term ind
binder 25802:25803 <> t1:361
binder 25805:25806 <> t2:362
R25833:25836 PL.Imp Assertion_S term ind
binder 25825:25826 <> t1:363
binder 25828:25829 <> t2:364
R25852:25855 PL.Imp <> bexp ind
binder 25849:25849 <> b:365
binder 25869:25869 <> P:366
R25895:25903 PL.Imp <> Assertion:357 ind
binder 25887:25888 <> d1:367
binder 25890:25891 <> d2:368
R25924:25932 PL.Imp <> Assertion:357 ind
binder 25916:25917 <> d1:369
binder 25919:25920 <> d2:370
R25948:25956 PL.Imp <> Assertion:357 ind
binder 25945:25945 <> d:371
R25976:25979 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R25980:25988 PL.Imp <> Assertion:357 ind
R25975:25975 Coq.Numbers.BinNums <> Z ind
binder 25972:25972 <> d:372
R26008:26011 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R26012:26020 PL.Imp <> Assertion:357 ind
R26007:26007 Coq.Numbers.BinNums <> Z ind
binder 26004:26004 <> d:373
R26025:26064 PL.Imp Assertion_S DProp constr
R26170:26172 PL.Imp Assertion_S DLe constr
not 26157:26157 Assertion_S ::assert_scope:x_'<='_x
R26268:26270 PL.Imp Assertion_S DLt constr
not 26254:26254 Assertion_S ::assert_scope:x_'<'_x
R26364:26366 PL.Imp Assertion_S DEq constr
not 26352:26352 Assertion_S ::assert_scope:x_'='_x
R26462:26465 PL.Imp Assertion_S DInj constr
not 26448:26448 Assertion_S ::assert_scope:'{['_x_']}'
R26550:26552 PL.Imp Assertion_S DOr constr
not 26535:26535 Assertion_S ::assert_scope:x_'OR'_x
R26634:26637 PL.Imp Assertion_S DAnd constr
not 26618:26618 Assertion_S ::assert_scope:x_'AND'_x
R26717:26720 PL.Imp Assertion_S DNot constr
not 26703:26703 Assertion_S ::assert_scope:'NOT'_x
R26809:26815 PL.Imp Assertion_S DExists constr
R26825:26825 Coq.Numbers.BinNums <> Z ind
binder 26822:26822 <> x:374
not 26785:26785 Assertion_S ::assert_scope:'EXISTS'_x_','_x
R26938:26944 PL.Imp Assertion_S DForall constr
R26954:26954 Coq.Numbers.BinNums <> Z ind
binder 26951:26951 <> x:375
not 26914:26914 Assertion_S ::assert_scope:'FORALL'_x_','_x
def 27046:27056 Assertion_S eqb_compute
R27062:27065 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27069:27072 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R27073:27076 Coq.Init.Datatypes <> bool ind
R27066:27068 Coq.Init.Datatypes <> nat ind
R27059:27061 Coq.Init.Datatypes <> nat ind
R27098:27100 Coq.Init.Datatypes <> nat ind
binder 27092:27092 <> n:376
binder 27094:27094 <> m:377
R27116:27119 Coq.Init.Datatypes <> bool ind
R27132:27132 PL.Imp <> n:376 var
R27158:27158 PL.Imp <> m:377 var
R27189:27192 Coq.Init.Datatypes <> true constr
R27209:27209 Coq.Init.Datatypes <> S constr
R27216:27220 Coq.Init.Datatypes <> false constr
R27243:27243 Coq.Init.Datatypes <> S constr
R27257:27257 PL.Imp <> m:377 var
R27287:27291 Coq.Init.Datatypes <> false constr
R27307:27307 Coq.Init.Datatypes <> S constr
R27315:27317 PL.Imp <> eqb:378 var
sec 27357:27361 Assertion_S subst
var 27374:27374 Assertion_S.subst X
R27377:27379 PL.Imp <> var def
var 27391:27391 Assertion_S.subst a
R27394:27397 PL.Imp <> aexp ind
def 27410:27417 Assertion_S aexp_sub
R27424:27427 PL.Imp <> aexp ind
binder 27420:27421 <> a0:384
R27431:27434 PL.Imp <> aexp ind
R27449:27450 PL.Imp <> a0:384 var
R27463:27466 PL.Imp <> ANum constr
R27473:27476 PL.Imp <> ANum constr
R27486:27488 PL.Imp <> AId constr
R27508:27518 PL.Imp Assertion_S eqb_compute def
R27520:27520 PL.Imp <> Assertion_S.subst.X var
R27556:27558 PL.Imp <> AId constr
R27539:27539 PL.Imp <> Assertion_S.subst.a var
R27569:27573 PL.Imp <> APlus constr
R27584:27588 PL.Imp <> APlus constr
R27605:27612 PL.Imp <> aexp_sub:385 def
R27591:27598 PL.Imp <> aexp_sub:385 def
R27624:27629 PL.Imp <> AMinus constr
R27640:27645 PL.Imp <> AMinus constr
R27662:27669 PL.Imp <> aexp_sub:385 def
R27648:27655 PL.Imp <> aexp_sub:385 def
R27681:27685 PL.Imp <> AMult constr
R27696:27700 PL.Imp <> AMult constr
R27717:27724 PL.Imp <> aexp_sub:385 def
R27703:27710 PL.Imp <> aexp_sub:385 def
def 27749:27756 Assertion_S bexp_sub
R27762:27765 PL.Imp <> bexp ind
binder 27759:27759 <> b:387
R27769:27772 PL.Imp <> bexp ind
R27787:27787 PL.Imp <> b:387 var
R27800:27804 PL.Imp <> BTrue constr
R27809:27813 PL.Imp <> BTrue constr
R27821:27826 PL.Imp <> BFalse constr
R27831:27836 PL.Imp <> BFalse constr
R27844:27846 PL.Imp <> BEq constr
R27857:27859 PL.Imp <> BEq constr
R27876:27883 PL.Imp Assertion_S aexp_sub def
R27862:27869 PL.Imp Assertion_S aexp_sub def
R27895:27897 PL.Imp <> BLe constr
R27908:27910 PL.Imp <> BLe constr
R27927:27934 PL.Imp Assertion_S aexp_sub def
R27913:27920 PL.Imp Assertion_S aexp_sub def
R27946:27949 PL.Imp <> BNot constr
R27956:27959 PL.Imp <> BNot constr
R27962:27969 PL.Imp <> bexp_sub:388 def
R27971:27971 PL.Imp <> b:387 var
R27980:27983 PL.Imp <> BAnd constr
R27994:27997 PL.Imp <> BAnd constr
R28014:28021 PL.Imp <> bexp_sub:388 def
R28000:28007 PL.Imp <> bexp_sub:388 def
def 28046:28053 Assertion_S term_sub
R28059:28062 PL.Imp Assertion_S term ind
binder 28056:28056 <> t:390
R28078:28078 PL.Imp <> t:390 var
R28091:28094 PL.Imp Assertion_S TNum constr
R28101:28104 PL.Imp Assertion_S TNum constr
R28114:28120 PL.Imp Assertion_S TDenote constr
R28127:28133 PL.Imp Assertion_S TDenote constr
R28136:28143 PL.Imp Assertion_S aexp_sub def
R28154:28158 PL.Imp Assertion_S TPlus constr
R28169:28173 PL.Imp Assertion_S TPlus constr
R28190:28197 PL.Imp <> term_sub:391 def
R28176:28183 PL.Imp <> term_sub:391 def
R28209:28214 PL.Imp Assertion_S TMinus constr
R28225:28230 PL.Imp Assertion_S TMinus constr
R28247:28254 PL.Imp <> term_sub:391 def
R28233:28240 PL.Imp <> term_sub:391 def
R28266:28270 PL.Imp Assertion_S TMult constr
R28281:28285 PL.Imp Assertion_S TMult constr
R28302:28309 PL.Imp <> term_sub:391 def
R28288:28295 PL.Imp <> term_sub:391 def
def 28334:28341 Assertion_S assn_sub
R28347:28355 PL.Imp Assertion_S Assertion ind
binder 28344:28344 <> d:393
R28359:28367 PL.Imp Assertion_S Assertion ind
R28382:28382 PL.Imp <> d:393 var
R28395:28397 PL.Imp Assertion_S DLe constr
R28408:28410 PL.Imp Assertion_S DLe constr
R28427:28434 PL.Imp Assertion_S term_sub def
R28413:28420 PL.Imp Assertion_S term_sub def
R28446:28448 PL.Imp Assertion_S DLt constr
R28459:28461 PL.Imp Assertion_S DLt constr
R28478:28485 PL.Imp Assertion_S term_sub def
R28464:28471 PL.Imp Assertion_S term_sub def
R28497:28499 PL.Imp Assertion_S DEq constr
R28510:28512 PL.Imp Assertion_S DEq constr
R28529:28536 PL.Imp Assertion_S term_sub def
R28515:28522 PL.Imp Assertion_S term_sub def
R28548:28551 PL.Imp Assertion_S DInj constr
R28558:28561 PL.Imp Assertion_S DInj constr
R28564:28571 PL.Imp Assertion_S bexp_sub def
R28582:28586 PL.Imp Assertion_S DProp constr
R28593:28597 PL.Imp Assertion_S DProp constr
R28607:28609 PL.Imp Assertion_S DOr constr
R28620:28622 PL.Imp Assertion_S DOr constr
R28639:28646 PL.Imp <> assn_sub:394 def
R28625:28632 PL.Imp <> assn_sub:394 def
R28658:28661 PL.Imp Assertion_S DAnd constr
R28672:28675 PL.Imp Assertion_S DAnd constr
R28692:28699 PL.Imp <> assn_sub:394 def
R28678:28685 PL.Imp <> assn_sub:394 def
R28711:28714 PL.Imp Assertion_S DNot constr
R28721:28724 PL.Imp Assertion_S DNot constr
R28727:28734 PL.Imp <> assn_sub:394 def
R28736:28736 PL.Imp <> d:393 var
R28745:28751 PL.Imp Assertion_S DExists constr
R28758:28764 PL.Imp Assertion_S DExists constr
R28774:28774 Coq.Numbers.BinNums <> Z ind
binder 28771:28771 <> z:396
R28779:28786 PL.Imp <> assn_sub:394 def
R28789:28789 PL.Imp <> d:393 var
R28791:28791 PL.Imp <> z:396 var
R28801:28807 PL.Imp Assertion_S DForall constr
R28814:28820 PL.Imp Assertion_S DForall constr
R28830:28830 Coq.Numbers.BinNums <> Z ind
binder 28827:28827 <> z:397
R28835:28842 PL.Imp <> assn_sub:394 def
R28845:28845 PL.Imp <> d:393 var
R28847:28847 PL.Imp <> z:397 var
R28865:28869 PL.Imp Assertion_S.subst <> sec
def 28884:28894 Assertion_S aexp_denote
R28901:28905 PL.Imp <> state def
binder 28897:28898 <> st:398
R28912:28915 PL.Imp <> aexp ind
binder 28909:28909 <> a:399
R28919:28919 Coq.Numbers.BinNums <> Z ind
R28926:28930 PL.Imp <> aeval def
R28934:28935 PL.Imp <> st:398 var
R28932:28932 PL.Imp <> a:399 var
def 28950:28960 Assertion_S bexp_denote
R28967:28971 PL.Imp <> state def
binder 28963:28964 <> st:400
R28978:28981 PL.Imp <> bexp ind
binder 28975:28975 <> b:401
R28995:28999 PL.Imp <> beval def
R29003:29004 PL.Imp <> st:400 var
R29001:29001 PL.Imp <> b:401 var
def 29017:29027 Assertion_S term_denote
R29034:29038 PL.Imp <> state def
binder 29030:29031 <> st:402
R29045:29048 PL.Imp Assertion_S term ind
binder 29042:29042 <> t:403
R29052:29052 Coq.Numbers.BinNums <> Z ind
R29065:29065 PL.Imp <> t:403 var
R29076:29079 PL.Imp Assertion_S TNum constr
R29092:29098 PL.Imp Assertion_S TDenote constr
R29105:29115 PL.Imp Assertion_S aexp_denote def
R29117:29118 PL.Imp <> st:402 var
R29126:29130 PL.Imp Assertion_S TPlus constr
R29141:29141 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29159:29163 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29181:29181 Coq.ZArith.BinInt <> ::Z_scope:x_'+'_x not
R29142:29152 PL.Imp <> term_denote:404 def
R29154:29155 PL.Imp <> st:402 var
R29164:29174 PL.Imp <> term_denote:404 def
R29176:29177 PL.Imp <> st:402 var
R29187:29192 PL.Imp Assertion_S TMinus constr
R29203:29203 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29221:29225 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29243:29243 Coq.ZArith.BinInt <> ::Z_scope:x_'-'_x not
R29204:29214 PL.Imp <> term_denote:404 def
R29216:29217 PL.Imp <> st:402 var
R29226:29236 PL.Imp <> term_denote:404 def
R29238:29239 PL.Imp <> st:402 var
R29249:29253 PL.Imp Assertion_S TMult constr
R29264:29264 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29282:29286 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29304:29304 Coq.ZArith.BinInt <> ::Z_scope:x_'*'_x not
R29265:29275 PL.Imp <> term_denote:404 def
R29277:29278 PL.Imp <> st:402 var
R29287:29297 PL.Imp <> term_denote:404 def
R29299:29300 PL.Imp <> st:402 var
def 29323:29338 Assertion_S Assertion_denote
R29345:29349 PL.Imp <> state def
binder 29341:29342 <> st:406
R29356:29364 PL.Imp Assertion_S Assertion ind
binder 29353:29353 <> d:407
R29384:29384 PL.Imp <> d:407 var
R29395:29397 PL.Imp Assertion_S DLe constr
R29408:29408 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29426:29431 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29449:29449 Coq.ZArith.BinInt <> ::Z_scope:x_'<='_x not
R29409:29419 PL.Imp Assertion_S term_denote def
R29421:29422 PL.Imp <> st:406 var
R29432:29442 PL.Imp Assertion_S term_denote def
R29444:29445 PL.Imp <> st:406 var
R29455:29457 PL.Imp Assertion_S DLt constr
R29468:29468 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29486:29490 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29508:29508 Coq.ZArith.BinInt <> ::Z_scope:x_'<'_x not
R29469:29479 PL.Imp Assertion_S term_denote def
R29481:29482 PL.Imp <> st:406 var
R29491:29501 PL.Imp Assertion_S term_denote def
R29503:29504 PL.Imp <> st:406 var
R29514:29516 PL.Imp Assertion_S DEq constr
R29527:29527 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29545:29549 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29567:29567 Coq.Init.Logic <> ::type_scope:x_'='_x not
R29528:29538 PL.Imp Assertion_S term_denote def
R29540:29541 PL.Imp <> st:406 var
R29550:29560 PL.Imp Assertion_S term_denote def
R29562:29563 PL.Imp <> st:406 var
R29573:29576 PL.Imp Assertion_S DInj constr
R29583:29593 PL.Imp Assertion_S bexp_denote def
R29595:29596 PL.Imp <> st:406 var
R29604:29608 PL.Imp Assertion_S DProp constr
R29621:29623 PL.Imp Assertion_S DOr constr
R29634:29634 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29657:29662 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29685:29685 Coq.Init.Logic <> ::type_scope:x_'\/'_x not
R29635:29650 PL.Imp <> Assertion_denote:408 def
R29652:29653 PL.Imp <> st:406 var
R29663:29678 PL.Imp <> Assertion_denote:408 def
R29680:29681 PL.Imp <> st:406 var
R29691:29694 PL.Imp Assertion_S DAnd constr
R29705:29705 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29728:29733 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29756:29756 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R29706:29721 PL.Imp <> Assertion_denote:408 def
R29723:29724 PL.Imp <> st:406 var
R29734:29749 PL.Imp <> Assertion_denote:408 def
R29751:29752 PL.Imp <> st:406 var
R29762:29765 PL.Imp Assertion_S DNot constr
R29772:29774 Coq.Init.Logic <> ::type_scope:'~'_x not
R29796:29796 Coq.Init.Logic <> ::type_scope:'~'_x not
R29775:29790 PL.Imp <> Assertion_denote:408 def
R29795:29795 PL.Imp <> d:407 var
R29792:29793 PL.Imp <> st:406 var
R29802:29808 PL.Imp Assertion_S DExists constr
R29815:29821 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R29823:29824 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 29822:29822 <> k:410
R29825:29840 PL.Imp <> Assertion_denote:408 def
R29846:29846 PL.Imp <> d:407 var
R29848:29848 PL.Imp <> k:410 var
R29842:29843 PL.Imp <> st:406 var
R29855:29861 PL.Imp Assertion_S DForall constr
binder 29875:29875 <> k:411
R29878:29893 PL.Imp <> Assertion_denote:408 def
R29899:29899 PL.Imp <> d:407 var
R29901:29901 PL.Imp <> k:411 var
R29895:29896 PL.Imp <> st:406 var
def 29923:29929 Assertion_S derives
R29941:29944 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29954:29957 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R29945:29953 PL.Imp Assertion_S Assertion ind
R29932:29940 PL.Imp Assertion_S Assertion ind
R29979:29987 PL.Imp Assertion_S Assertion ind
binder 29972:29973 <> d1:412
binder 29975:29976 <> d2:413
binder 30002:30003 <> st:414
R30028:30031 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30032:30047 PL.Imp Assertion_S Assertion_denote def
R30052:30053 PL.Imp <> d2:413 var
R30049:30050 PL.Imp <> st:414 var
R30006:30021 PL.Imp Assertion_S Assertion_denote def
R30026:30027 PL.Imp <> d1:412 var
R30023:30024 PL.Imp <> st:414 var
R30065:30071 PL.Imp Assertion_S derives def
def 30086:30097 Assertion_S equiv_assert
R30105:30113 PL.Imp Assertion_S Assertion ind
binder 30100:30100 <> P:415
binder 30102:30102 <> Q:416
R30138:30141 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R30127:30133 PL.Imp Assertion_S derives def
R30137:30137 PL.Imp <> Q:416 var
R30135:30135 PL.Imp <> P:415 var
R30142:30148 PL.Imp Assertion_S derives def
R30152:30152 PL.Imp <> P:415 var
R30150:30150 PL.Imp <> Q:416 var
ax 30166:30177 Assertion_S hoare_triple
R30189:30192 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30196:30199 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30209:30212 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30200:30208 PL.Imp Assertion_S Assertion ind
R30193:30195 PL.Imp <> com ind
R30180:30188 PL.Imp Assertion_S Assertion ind
R30247:30253 PL.Imp Assertion_S derives def
not 30229:30229 Assertion_S :::x_'|--'_x
R30346:30357 PL.Imp Assertion_S equiv_assert def
not 30325:30325 Assertion_S :::x_'--||--'_x
R30435:30446 PL.Imp Assertion_S hoare_triple defax
not 30407:30407 Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}'
prf 30496:30507 Assertion_S FOL_complete
R30524:30532 PL.Imp Assertion_S Assertion ind
binder 30517:30518 <> d1:418
binder 30520:30521 <> d2:419
R30537:30537 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30597:30603 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30606:30610 PL.Imp Assertion_S :::x_'|--'_x not
R30604:30605 PL.Imp <> d1:418 var
R30611:30612 PL.Imp <> d2:419 var
binder 30545:30546 <> st:420
R30571:30574 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R30575:30590 PL.Imp Assertion_S Assertion_denote def
R30595:30596 PL.Imp <> d2:419 var
R30592:30593 PL.Imp <> st:420 var
R30549:30564 PL.Imp Assertion_S Assertion_denote def
R30569:30570 PL.Imp <> d1:418 var
R30566:30567 PL.Imp <> st:420 var
sec 30657:30661 Assertion_S simpl
def 30674:30683 Assertion_S aexp_simpl
R30689:30692 PL.Imp <> aexp ind
binder 30686:30686 <> a:421
R30696:30699 PL.Imp Assertion_S term ind
R30714:30714 PL.Imp <> a:421 var
R30727:30730 PL.Imp <> ANum constr
R30737:30740 PL.Imp Assertion_S TNum constr
R30750:30752 PL.Imp <> AId constr
R30759:30765 PL.Imp Assertion_S TDenote constr
R30768:30770 PL.Imp <> AId constr
R30781:30785 PL.Imp <> APlus constr
R30796:30800 PL.Imp Assertion_S TPlus constr
R30819:30828 PL.Imp <> aexp_simpl:422 def
R30803:30812 PL.Imp <> aexp_simpl:422 def
R30840:30845 PL.Imp <> AMinus constr
R30856:30861 PL.Imp Assertion_S TMinus constr
R30880:30889 PL.Imp <> aexp_simpl:422 def
R30864:30873 PL.Imp <> aexp_simpl:422 def
R30901:30905 PL.Imp <> AMult constr
R30916:30920 PL.Imp Assertion_S TMult constr
R30939:30948 PL.Imp <> aexp_simpl:422 def
R30923:30932 PL.Imp <> aexp_simpl:422 def
def 30973:30982 Assertion_S bexp_simpl
R30988:30991 PL.Imp <> bexp ind
binder 30985:30985 <> b:424
R30995:31003 PL.Imp Assertion_S Assertion ind
R31018:31018 PL.Imp <> b:424 var
R31031:31035 PL.Imp <> BTrue constr
R31040:31044 PL.Imp Assertion_S DProp constr
R31046:31049 Coq.Init.Logic <> True ind
R31057:31062 PL.Imp <> BFalse constr
R31067:31071 PL.Imp Assertion_S DProp constr
R31073:31077 Coq.Init.Logic <> False ind
R31085:31087 PL.Imp <> BEq constr
R31098:31100 PL.Imp Assertion_S DEq constr
R31119:31128 PL.Imp Assertion_S aexp_simpl def
R31103:31112 PL.Imp Assertion_S aexp_simpl def
R31140:31142 PL.Imp <> BLe constr
R31153:31155 PL.Imp Assertion_S DLe constr
R31174:31183 PL.Imp Assertion_S aexp_simpl def
R31158:31167 PL.Imp Assertion_S aexp_simpl def
R31195:31198 PL.Imp <> BNot constr
R31205:31208 PL.Imp Assertion_S DNot constr
R31211:31220 PL.Imp <> bexp_simpl:425 def
R31222:31222 PL.Imp <> b:424 var
R31231:31234 PL.Imp <> BAnd constr
R31245:31248 PL.Imp Assertion_S DAnd constr
R31267:31276 PL.Imp <> bexp_simpl:425 def
R31251:31260 PL.Imp <> bexp_simpl:425 def
def 31301:31310 Assertion_S term_simpl
R31316:31319 PL.Imp Assertion_S term ind
binder 31313:31313 <> t:427
R31335:31335 PL.Imp <> t:427 var
R31348:31351 PL.Imp Assertion_S TNum constr
R31358:31361 PL.Imp Assertion_S TNum constr
R31371:31377 PL.Imp Assertion_S TDenote constr
R31384:31393 PL.Imp Assertion_S aexp_simpl def
R31403:31407 PL.Imp Assertion_S TPlus constr
R31418:31422 PL.Imp Assertion_S TPlus constr
R31441:31450 PL.Imp <> term_simpl:428 def
R31425:31434 PL.Imp <> term_simpl:428 def
R31462:31467 PL.Imp Assertion_S TMinus constr
R31478:31483 PL.Imp Assertion_S TMinus constr
R31502:31511 PL.Imp <> term_simpl:428 def
R31486:31495 PL.Imp <> term_simpl:428 def
R31523:31527 PL.Imp Assertion_S TMult constr
R31538:31542 PL.Imp Assertion_S TMult constr
R31561:31570 PL.Imp <> term_simpl:428 def
R31545:31554 PL.Imp <> term_simpl:428 def
def 31595:31604 Assertion_S assn_simpl
R31610:31618 PL.Imp Assertion_S Assertion ind
binder 31607:31607 <> d:430
R31622:31630 PL.Imp Assertion_S Assertion ind
R31645:31645 PL.Imp <> d:430 var
R31658:31660 PL.Imp Assertion_S DLe constr
R31671:31673 PL.Imp Assertion_S DLe constr
R31692:31701 PL.Imp Assertion_S term_simpl def
R31676:31685 PL.Imp Assertion_S term_simpl def
R31713:31715 PL.Imp Assertion_S DLt constr
R31726:31728 PL.Imp Assertion_S DLt constr
R31747:31756 PL.Imp Assertion_S term_simpl def
R31731:31740 PL.Imp Assertion_S term_simpl def
R31768:31770 PL.Imp Assertion_S DEq constr
R31781:31783 PL.Imp Assertion_S DEq constr
R31802:31811 PL.Imp Assertion_S term_simpl def
R31786:31795 PL.Imp Assertion_S term_simpl def
R31823:31826 PL.Imp Assertion_S DInj constr
R31833:31842 PL.Imp Assertion_S bexp_simpl def
R31852:31856 PL.Imp Assertion_S DProp constr
R31863:31867 PL.Imp Assertion_S DProp constr
R31877:31879 PL.Imp Assertion_S DOr constr
R31890:31892 PL.Imp Assertion_S DOr constr
R31911:31920 PL.Imp <> assn_simpl:431 def
R31895:31904 PL.Imp <> assn_simpl:431 def
R31932:31935 PL.Imp Assertion_S DAnd constr
R31946:31949 PL.Imp Assertion_S DAnd constr
R31968:31977 PL.Imp <> assn_simpl:431 def
R31952:31961 PL.Imp <> assn_simpl:431 def
R31989:31992 PL.Imp Assertion_S DNot constr
R31999:32002 PL.Imp Assertion_S DNot constr
R32005:32014 PL.Imp <> assn_simpl:431 def
R32016:32016 PL.Imp <> d:430 var
R32025:32031 PL.Imp Assertion_S DExists constr
R32038:32044 PL.Imp Assertion_S DExists constr
R32054:32054 Coq.Numbers.BinNums <> Z ind
binder 32051:32051 <> z:433
R32059:32068 PL.Imp <> assn_simpl:431 def
R32071:32071 PL.Imp <> d:430 var
R32073:32073 PL.Imp <> z:433 var
R32083:32089 PL.Imp Assertion_S DForall constr
R32096:32102 PL.Imp Assertion_S DForall constr
R32112:32112 Coq.Numbers.BinNums <> Z ind
binder 32109:32109 <> z:434
R32117:32126 PL.Imp <> assn_simpl:431 def
R32129:32129 PL.Imp <> d:430 var
R32131:32131 PL.Imp <> z:434 var
ind 32155:32169 Assertion_S elim_trivial_ex
constr 32210:32231 Assertion_S elim_trivial_ex_kernal
constr 32353:32371 Assertion_S elim_trivial_ex_ex'
constr 32514:32533 Assertion_S elim_trivial_ex_all'
constr 32676:32693 Assertion_S elim_trivial_ex_or
constr 32857:32875 Assertion_S elim_trivial_ex_and
constr 33041:33059 Assertion_S elim_trivial_ex_not
constr 33171:33190 Assertion_S elim_trivial_ex_atom
R32181:32184 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32194:32197 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32185:32193 PL.Imp Assertion_S Assertion ind
R32172:32180 PL.Imp Assertion_S Assertion ind
R32253:32261 PL.Imp Assertion_S Assertion ind
binder 32247:32247 <> d:437
binder 32249:32250 <> d':438
R32292:32303 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32304:32318 PL.Imp <> elim_trivial_ex:435 ind
R32346:32347 PL.Imp <> d':438 var
R32321:32327 PL.Imp Assertion_S DExists constr
R32337:32337 Coq.Numbers.BinNums <> Z ind
binder 32334:32334 <> z:439
R32342:32342 PL.Imp <> d:437 var
R32272:32286 PL.Imp <> elim_trivial_ex:435 ind
R32290:32291 PL.Imp <> d':438 var
R32288:32288 PL.Imp <> d:437 var
R32394:32397 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32398:32406 PL.Imp Assertion_S Assertion ind
R32393:32393 Coq.Numbers.BinNums <> Z ind
binder 32387:32387 <> d:440
binder 32389:32390 <> d':441
R32417:32417 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32456:32468 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32469:32483 PL.Imp <> elim_trivial_ex:435 ind
R32498:32504 PL.Imp Assertion_S DExists constr
R32506:32507 PL.Imp <> d':441 var
R32486:32492 PL.Imp Assertion_S DExists constr
R32494:32494 PL.Imp <> d:440 var
binder 32425:32425 <> z:442
R32428:32442 PL.Imp <> elim_trivial_ex:435 ind
R32451:32452 PL.Imp <> d':441 var
R32454:32454 PL.Imp <> z:442 var
R32445:32445 PL.Imp <> d:440 var
R32447:32447 PL.Imp <> z:442 var
R32556:32559 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32560:32568 PL.Imp Assertion_S Assertion ind
R32555:32555 Coq.Numbers.BinNums <> Z ind
binder 32549:32549 <> d:443
binder 32551:32552 <> d':444
R32579:32579 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32618:32630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32631:32645 PL.Imp <> elim_trivial_ex:435 ind
R32660:32666 PL.Imp Assertion_S DForall constr
R32668:32669 PL.Imp <> d':444 var
R32648:32654 PL.Imp Assertion_S DForall constr
R32656:32656 PL.Imp <> d:443 var
binder 32587:32587 <> z:445
R32590:32604 PL.Imp <> elim_trivial_ex:435 ind
R32613:32614 PL.Imp <> d':444 var
R32616:32616 PL.Imp <> z:445 var
R32607:32607 PL.Imp <> d:443 var
R32609:32609 PL.Imp <> z:445 var
R32724:32732 PL.Imp Assertion_S Assertion ind
binder 32709:32710 <> d1:446
binder 32712:32713 <> d2:447
binder 32715:32717 <> d1':448
binder 32719:32721 <> d2':449
R32765:32776 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32799:32810 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32811:32825 PL.Imp <> elim_trivial_ex:435 ind
R32840:32842 PL.Imp Assertion_S DOr constr
R32848:32850 PL.Imp <> d2':449 var
R32844:32846 PL.Imp <> d1':448 var
R32828:32830 PL.Imp Assertion_S DOr constr
R32835:32836 PL.Imp <> d2:447 var
R32832:32833 PL.Imp <> d1:446 var
R32777:32791 PL.Imp <> elim_trivial_ex:435 ind
R32796:32798 PL.Imp <> d2':449 var
R32793:32794 PL.Imp <> d2:447 var
R32743:32757 PL.Imp <> elim_trivial_ex:435 ind
R32762:32764 PL.Imp <> d1':448 var
R32759:32760 PL.Imp <> d1:446 var
R32906:32914 PL.Imp Assertion_S Assertion ind
binder 32891:32892 <> d1:450
binder 32894:32895 <> d2:451
binder 32897:32899 <> d1':452
binder 32901:32903 <> d2':453
R32947:32958 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32981:32992 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R32993:33007 PL.Imp <> elim_trivial_ex:435 ind
R33023:33026 PL.Imp Assertion_S DAnd constr
R33032:33034 PL.Imp <> d2':453 var
R33028:33030 PL.Imp <> d1':452 var
R33010:33013 PL.Imp Assertion_S DAnd constr
R33018:33019 PL.Imp <> d2:451 var
R33015:33016 PL.Imp <> d1:450 var
R32959:32973 PL.Imp <> elim_trivial_ex:435 ind
R32978:32980 PL.Imp <> d2':453 var
R32975:32976 PL.Imp <> d2:451 var
R32925:32939 PL.Imp <> elim_trivial_ex:435 ind
R32944:32946 PL.Imp <> d1':452 var
R32941:32942 PL.Imp <> d1:450 var
R33081:33089 PL.Imp Assertion_S Assertion ind
binder 33075:33075 <> d:454
binder 33077:33078 <> d':455
R33120:33131 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33132:33146 PL.Imp <> elim_trivial_ex:435 ind
R33158:33161 PL.Imp Assertion_S DNot constr
R33163:33164 PL.Imp <> d':455 var
R33149:33152 PL.Imp Assertion_S DNot constr
R33154:33154 PL.Imp <> d:454 var
R33100:33114 PL.Imp <> elim_trivial_ex:435 ind
R33118:33119 PL.Imp <> d':455 var
R33116:33116 PL.Imp <> d:454 var
R33209:33217 PL.Imp Assertion_S Assertion ind
binder 33206:33206 <> d:456
R33228:33242 PL.Imp <> elim_trivial_ex:435 ind
R33246:33246 PL.Imp <> d:456 var
R33244:33244 PL.Imp <> d:456 var
prf 33256:33273 Assertion_S elim_trivial_ex_ex
R33296:33299 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33300:33308 PL.Imp Assertion_S Assertion ind
R33295:33295 Coq.Numbers.BinNums <> Z ind
binder 33289:33289 <> d:457
binder 33291:33292 <> d':458
R33319:33319 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33381:33393 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33394:33408 PL.Imp Assertion_S elim_trivial_ex ind
R33423:33429 PL.Imp Assertion_S DExists constr
R33431:33432 PL.Imp <> d':458 var
R33411:33417 PL.Imp Assertion_S DExists constr
R33419:33419 PL.Imp <> d:457 var
binder 33327:33327 <> z:459
R33330:33336 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R33340:33341 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 33337:33339 <> d'':460
R33367:33370 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R33342:33356 PL.Imp Assertion_S elim_trivial_ex ind
R33364:33366 PL.Imp <> d'':460 var
R33359:33359 PL.Imp <> d:457 var
R33361:33361 PL.Imp <> z:459 var
R33374:33376 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33371:33373 PL.Imp <> d'':460 var
R33377:33378 PL.Imp <> d':458 var
R33380:33380 PL.Imp <> z:459 var
R33462:33480 PL.Imp Assertion_S elim_trivial_ex_ex' constr
R33462:33480 PL.Imp Assertion_S elim_trivial_ex_ex' constr
prf 33574:33592 Assertion_S elim_trivial_ex_all
R33615:33618 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33619:33627 PL.Imp Assertion_S Assertion ind
R33614:33614 Coq.Numbers.BinNums <> Z ind
binder 33608:33608 <> d:461
binder 33610:33611 <> d':462
R33638:33638 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33700:33712 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R33713:33727 PL.Imp Assertion_S elim_trivial_ex ind
R33742:33748 PL.Imp Assertion_S DForall constr
R33750:33751 PL.Imp <> d':462 var
R33730:33736 PL.Imp Assertion_S DForall constr
R33738:33738 PL.Imp <> d:461 var
binder 33646:33646 <> z:463
R33649:33655 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
R33659:33660 Coq.Init.Logic <> ::type_scope:'exists'_x_'..'_x_','_x not
binder 33656:33658 <> d'':464
R33686:33689 Coq.Init.Logic <> ::type_scope:x_'/\'_x not
R33661:33675 PL.Imp Assertion_S elim_trivial_ex ind
R33683:33685 PL.Imp <> d'':464 var
R33678:33678 PL.Imp <> d:461 var
R33680:33680 PL.Imp <> z:463 var
R33693:33695 Coq.Init.Logic <> ::type_scope:x_'='_x not
R33690:33692 PL.Imp <> d'':464 var
R33696:33697 PL.Imp <> d':462 var
R33699:33699 PL.Imp <> z:463 var
R33781:33800 PL.Imp Assertion_S elim_trivial_ex_all' constr
R33781:33800 PL.Imp Assertion_S elim_trivial_ex_all' constr
R33892:33896 PL.Imp Assertion_S.simpl <> sec
ax 33906:33918 Assertion_S simpl_derives
binder 33928:33928 <> P:465
binder 33930:33930 <> Q:466
R33942:33946 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R33936:33940 PL.Imp Assertion_S :::x_'|--'_x not
R33935:33935 PL.Imp <> P:465 var
R33941:33941 PL.Imp <> Q:466 var
R33959:33963 PL.Imp Assertion_S :::x_'|--'_x not
R33947:33956 PL.Imp Assertion_S assn_simpl def
R33958:33958 PL.Imp <> P:465 var
R33964:33973 PL.Imp Assertion_S assn_simpl def
R33975:33975 PL.Imp <> Q:466 var
ax 33985:33996 Assertion_S simpl_triple
binder 34006:34006 <> P:468
binder 34008:34008 <> c:469
binder 34010:34010 <> Q:470
R34028:34032 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34015:34016 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34018:34020 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34022:34024 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34026:34027 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34017:34017 PL.Imp <> P:468 var
R34021:34021 PL.Imp <> c:469 var
R34025:34025 PL.Imp <> Q:470 var
R34033:34034 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34047:34049 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34051:34053 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34066:34067 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34035:34044 PL.Imp Assertion_S assn_simpl def
R34046:34046 PL.Imp <> P:468 var
R34050:34050 PL.Imp <> c:469 var
R34054:34063 PL.Imp Assertion_S assn_simpl def
R34065:34065 PL.Imp <> Q:470 var
ax 34077:34099 Assertion_S elim_trivial_ex_derives
binder 34109:34109 <> P:472
binder 34111:34111 <> Q:473
binder 34113:34114 <> P':474
binder 34116:34117 <> Q':475
R34142:34145 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34167:34171 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34193:34193 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34179:34183 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34173:34177 PL.Imp Assertion_S :::x_'|--'_x not
R34172:34172 PL.Imp <> P:472 var
R34178:34178 PL.Imp <> Q:473 var
R34186:34190 PL.Imp Assertion_S :::x_'|--'_x not
R34184:34185 PL.Imp <> P':474 var
R34191:34192 PL.Imp <> Q':475 var
R34146:34160 PL.Imp Assertion_S elim_trivial_ex ind
R34165:34166 PL.Imp <> Q':475 var
R34162:34162 PL.Imp <> Q:473 var
R34122:34136 PL.Imp Assertion_S elim_trivial_ex ind
R34140:34141 PL.Imp <> P':474 var
R34138:34138 PL.Imp <> P:472 var
ax 34203:34224 Assertion_S elim_trivial_ex_triple
binder 34234:34234 <> P:477
binder 34236:34236 <> c:478
binder 34238:34238 <> Q:479
binder 34240:34241 <> P':480
binder 34243:34244 <> Q':481
R34269:34272 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34294:34298 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34332:34332 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R34312:34316 Coq.Init.Logic <> ::type_scope:x_'<->'_x not
R34299:34300 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34302:34304 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34306:34308 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34310:34311 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34301:34301 PL.Imp <> P:477 var
R34305:34305 PL.Imp <> c:478 var
R34309:34309 PL.Imp <> Q:479 var
R34317:34318 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34321:34323 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34325:34327 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34330:34331 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R34319:34320 PL.Imp <> P':480 var
R34324:34324 PL.Imp <> c:478 var
R34328:34329 PL.Imp <> Q':481 var
R34273:34287 PL.Imp Assertion_S elim_trivial_ex ind
R34292:34293 PL.Imp <> Q':481 var
R34289:34289 PL.Imp <> Q:479 var
R34249:34263 PL.Imp Assertion_S elim_trivial_ex ind
R34267:34268 PL.Imp <> P':480 var
R34265:34265 PL.Imp <> P:477 var
R34340:34350 PL.Imp Assertion_S <> mod
mod 34361:34384 <> Concrete_Pretty_Printing
ind 34414:34416 Concrete_Pretty_Printing var
constr 34445:34460 Concrete_Pretty_Printing var_name_trivial
rec 34414:34416 Concrete_Pretty_Printing var
proj 34445:34460 Concrete_Pretty_Printing var_name_trivial
R34429:34431 PL.Imp <> var def
binder 34419:34426 <> var_name:483
R34471:34473 Coq.Init.Logic <> ::type_scope:x_'='_x not
R34463:34470 PL.Imp <> var_name:483 var
R34474:34481 PL.Imp <> var_name:483 var
R34531:34533 PL.Imp Concrete_Pretty_Printing var class
R34598:34600 PL.Imp Concrete_Pretty_Printing var class
R34588:34594 Coq.Init.Logic <> eq_refl constr
R34645:34645 Coq.Init.Datatypes <> S constr
not 34662:34662 Concrete_Pretty_Printing :::'new_var()'
def 34717:34719 Concrete_Pretty_Printing AId
binder 34722:34729 <> var_name:486
R34737:34739 PL.Imp Concrete_Pretty_Printing var class
R34741:34748 PL.Imp <> var_name:486 var
binder 34733:34733 <> X:487
R34752:34755 PL.Imp <> aexp ind
R34760:34762 PL.Imp <> AId constr
R34764:34771 PL.Imp <> var_name:486 var
R34775:34801 PL.Imp Concrete_Pretty_Printing AId def
def 34816:34819 Concrete_Pretty_Printing CAss
binder 34822:34829 <> var_name:488
R34838:34840 PL.Imp Concrete_Pretty_Printing var class
R34842:34849 PL.Imp <> var_name:488 var
binder 34833:34833 <> v:489
R34857:34860 PL.Imp <> aexp ind
binder 34853:34853 <> a:490
R34864:34866 PL.Imp <> com ind
R34873:34876 PL.Imp <> CAss constr
R34887:34887 PL.Imp <> a:490 var
R34878:34885 PL.Imp <> var_name:488 var
R34918:34921 PL.Imp Concrete_Pretty_Printing CAss def
not 34900:34900 Concrete_Pretty_Printing ::imp_scope:x_'::='_x
def 34967:34974 Concrete_Pretty_Printing aexp_sub
binder 34977:34984 <> var_name:491
R34992:34994 PL.Imp Concrete_Pretty_Printing var class
R34996:35003 PL.Imp <> var_name:491 var
binder 34988:34988 <> X:492
binder 35006:35006 <> a:493
binder 35008:35009 <> a0:494
R35014:35021 PL.Imp Assertion_S aexp_sub def
R35034:35035 PL.Imp <> a0:494 var
R35032:35032 PL.Imp <> a:493 var
R35023:35030 PL.Imp <> var_name:491 var
def 35050:35057 Concrete_Pretty_Printing bexp_sub
binder 35060:35067 <> var_name:495
R35075:35077 PL.Imp Concrete_Pretty_Printing var class
R35079:35086 PL.Imp <> var_name:495 var
binder 35071:35071 <> X:496
binder 35089:35089 <> a:497
binder 35091:35091 <> b:498
R35096:35103 PL.Imp Assertion_S bexp_sub def
R35116:35116 PL.Imp <> b:498 var
R35114:35114 PL.Imp <> a:497 var
R35105:35112 PL.Imp <> var_name:495 var
def 35131:35138 Concrete_Pretty_Printing term_sub
binder 35141:35148 <> var_name:499
R35156:35158 PL.Imp Concrete_Pretty_Printing var class
R35160:35167 PL.Imp <> var_name:499 var
binder 35152:35152 <> X:500
binder 35170:35170 <> a:501
binder 35172:35172 <> t:502
R35177:35184 PL.Imp Assertion_S term_sub def
R35197:35197 PL.Imp <> t:502 var
R35195:35195 PL.Imp <> a:501 var
R35186:35193 PL.Imp <> var_name:499 var
def 35212:35219 Concrete_Pretty_Printing assn_sub
binder 35222:35229 <> var_name:503
R35237:35239 PL.Imp Concrete_Pretty_Printing var class
R35241:35248 PL.Imp <> var_name:503 var
binder 35233:35233 <> X:504
binder 35251:35251 <> a:505
binder 35253:35253 <> d:506
R35258:35265 PL.Imp Assertion_S assn_sub def
R35278:35278 PL.Imp <> d:506 var
R35276:35276 PL.Imp <> a:505 var
R35267:35274 PL.Imp <> var_name:503 var
R35292:35299 PL.Imp Concrete_Pretty_Printing aexp_sub def
R35292:35299 PL.Imp Concrete_Pretty_Printing aexp_sub def
R35349:35356 PL.Imp Concrete_Pretty_Printing bexp_sub def
R35349:35356 PL.Imp Concrete_Pretty_Printing bexp_sub def
R35405:35412 PL.Imp Concrete_Pretty_Printing term_sub def
R35405:35412 PL.Imp Concrete_Pretty_Printing term_sub def
R35461:35468 PL.Imp Concrete_Pretty_Printing assn_sub def
R35461:35468 PL.Imp Concrete_Pretty_Printing assn_sub def
R35537:35544 PL.Imp Concrete_Pretty_Printing assn_sub def
not 35517:35517 Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']'
R35641:35648 PL.Imp Concrete_Pretty_Printing aexp_sub def
not 35620:35620 Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']'
ind 35721:35723 Concrete_Pretty_Printing dec
constr 35754:35758 Concrete_Pretty_Printing DCEnd
constr 35795:35801 Concrete_Pretty_Printing DCSeq_A
constr 35858:35864 Concrete_Pretty_Printing DCSeq_C
ind 35922:35930 Concrete_Pretty_Printing decorated
constr 35945:35951 Concrete_Pretty_Printing DCBegin
ind 35978:35981 Concrete_Pretty_Printing dcom
constr 35997:36002 Concrete_Pretty_Printing DCSkip
constr 36015:36019 Concrete_Pretty_Printing DCAss
constr 36081:36084 Concrete_Pretty_Printing DCIf
constr 36131:36137 Concrete_Pretty_Printing DCWhile
R35730:35733 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35738:35741 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R35734:35737 Coq.Init.Datatypes <> bool ind
R35726:35729 Coq.Init.Datatypes <> bool ind
R35764:35772 PL.Imp Assertion_S Assertion ind
binder 35761:35761 <> a:513
R35776:35778 PL.Imp <> dec:507 ind
R35785:35789 Coq.Init.Datatypes <> false constr
R35780:35783 Coq.Init.Datatypes <> true constr
binder 35804:35805 <> f1:514
binder 35807:35808 <> f2:515
R35815:35823 PL.Imp Assertion_S Assertion ind
binder 35812:35812 <> a:516
R35830:35832 PL.Imp <> dec:507 ind
R35837:35838 PL.Imp <> f2:515 var
R35834:35835 PL.Imp <> f1:514 var
binder 35827:35827 <> c:517
R35842:35844 PL.Imp <> dec:507 ind
R35851:35852 PL.Imp <> f2:515 var
R35846:35849 Coq.Init.Datatypes <> true constr
binder 35867:35868 <> f1:518
binder 35870:35871 <> f2:519
R35879:35882 PL.Imp <> dcom:509 ind
binder 35875:35876 <> c1:520
R35889:35891 PL.Imp <> dec:507 ind
R35896:35897 PL.Imp <> f2:519 var
R35893:35894 PL.Imp <> f1:518 var
binder 35886:35886 <> c:521
R35901:35903 PL.Imp <> dec:507 ind
R35911:35914 Coq.Init.Datatypes <> true constr
R35905:35909 Coq.Init.Datatypes <> false constr
R35957:35959 PL.Imp <> dec:507 ind
R35966:35969 Coq.Init.Datatypes <> true constr
R35961:35964 Coq.Init.Datatypes <> true constr
binder 35954:35954 <> c:522
R36006:36009 PL.Imp <> dcom:509 ind
R36041:36043 Coq.Init.Datatypes <> nat ind
binder 36031:36038 <> var_name:523
R36060:36063 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36068:36071 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36072:36075 PL.Imp <> dcom:509 ind
R36064:36067 PL.Imp <> aexp ind
R36048:36050 PL.Imp Concrete_Pretty_Printing var class
R36052:36059 PL.Imp <> var_name:523 var
R36092:36095 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36105:36108 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36118:36121 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36122:36125 PL.Imp <> dcom:509 ind
R36109:36117 PL.Imp <> decorated:508 ind
R36096:36104 PL.Imp <> decorated:508 ind
R36088:36091 PL.Imp <> bexp ind
R36145:36148 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36158:36161 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R36162:36165 PL.Imp <> dcom:509 ind
R36149:36157 PL.Imp <> decorated:508 ind
R36141:36144 PL.Imp <> bexp ind
R36333:36338 PL.Imp Concrete_Pretty_Printing DCSkip constr
not 36318:36318 Concrete_Pretty_Printing ::dcom_scope:'Skip'
R36381:36385 PL.Imp Concrete_Pretty_Printing DCAss constr
not 36363:36363 Concrete_Pretty_Printing ::dcom_scope:x_'::='_x
R36469:36475 PL.Imp Concrete_Pretty_Printing DCWhile constr
not 36433:36433 Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile'
R36584:36587 PL.Imp Concrete_Pretty_Printing DCIf constr
not 36540:36540 Concrete_Pretty_Printing ::dcom_scope:'If'_x_'Then'_x_'Else'_x_'EndIf'
R36682:36688 PL.Imp Concrete_Pretty_Printing DCSeq_A constr
R36690:36693 Coq.Init.Datatypes <> true constr
not 36657:36657 Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x
R36787:36793 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R36800:36803 Coq.Init.Datatypes <> true constr
R36795:36798 Coq.Init.Datatypes <> true constr
not 36762:36762 Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x
R36890:36896 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R36903:36907 Coq.Init.Datatypes <> false constr
R36898:36901 Coq.Init.Datatypes <> true constr
not 36870:36870 Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x
R36994:37000 PL.Imp Concrete_Pretty_Printing DCSeq_A constr
R37002:37006 Coq.Init.Datatypes <> false constr
not 36974:36974 Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x
R37095:37101 PL.Imp Concrete_Pretty_Printing DCSeq_C constr
R37109:37112 Coq.Init.Datatypes <> true constr
R37103:37107 Coq.Init.Datatypes <> false constr
not 37075:37075 Concrete_Pretty_Printing ::dcom_scope:x_';;'_x
R37192:37196 PL.Imp Concrete_Pretty_Printing DCEnd constr
not 37179:37179 Concrete_Pretty_Printing ::dcom_scope:x_'*/'
R37272:37278 PL.Imp Concrete_Pretty_Printing DCBegin constr
not 37259:37259 Concrete_Pretty_Printing ::dcom_scope:'/*'_x
mod 37340:37363 <> Concrete_Pretty_Printing.sample_decorated_program
inst 37412:37412 Concrete_Pretty_Printing.sample_decorated_program X
R37415:37417 PL.Imp Concrete_Pretty_Printing var class
R37422:37430 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 37448:37448 Concrete_Pretty_Printing.sample_decorated_program Y
R37451:37453 PL.Imp Concrete_Pretty_Printing var class
R37458:37466 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
def 37481:37483 Concrete_Pretty_Printing.sample_decorated_program dc1
R37491:37491 Coq.Numbers.BinNums <> Z ind
binder 37486:37486 <> m:524
binder 37488:37488 <> n:525
R37496:37504 PL.Imp Concrete_Pretty_Printing decorated ind
R37511:37513 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37520:37525 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37515:37518 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37519:37519 PL.Imp <> m:524 var
R37533:37537 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_x not
R37527:37531 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37526:37526 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37532:37532 PL.Imp <> m:524 var
R37545:37552 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R37539:37543 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37538:37538 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37589:37594 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37574:37578 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37570:37572 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37562:37564 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37554:37556 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37553:37553 PL.Imp <> n:525 var
R37557:37558 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37560:37561 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37559:37559 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37565:37566 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37568:37569 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37567:37567 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37573:37573 PL.Imp <> m:524 var
R37580:37583 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37584:37585 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37587:37588 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37586:37586 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37764:37769 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R37595:37600 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37607:37614 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37753:37763 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R37602:37605 PL.Imp <> ::imp_scope:x_'<='_x not
R37601:37601 PL.Imp <> n:525 var
R37606:37606 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37615:37617 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37669:37676 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37654:37658 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37639:37643 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37635:37637 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37627:37629 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37619:37621 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37618:37618 PL.Imp <> n:525 var
R37622:37623 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37625:37626 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37624:37624 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37630:37631 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37633:37634 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37632:37632 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37638:37638 PL.Imp <> m:524 var
R37645:37648 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37649:37650 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37652:37653 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37651:37651 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37659:37660 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37667:37668 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37662:37665 PL.Imp <> ::imp_scope:x_'<='_x not
R37661:37661 PL.Imp <> n:525 var
R37666:37666 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37688:37694 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_x not
R37678:37682 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37677:37677 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37684:37686 PL.Imp <> ::imp_scope:x_'-'_x not
R37683:37683 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37687:37687 PL.Imp <> n:525 var
R37706:37713 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R37696:37700 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37695:37695 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37702:37704 PL.Imp <> ::imp_scope:x_'+'_x not
R37701:37701 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37750:37752 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R37735:37739 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37731:37733 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37723:37725 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37715:37717 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37714:37714 PL.Imp <> n:525 var
R37718:37719 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37721:37722 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37720:37720 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37726:37727 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37729:37730 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37728:37728 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37734:37734 PL.Imp <> m:524 var
R37741:37744 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37745:37746 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37748:37749 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37747:37747 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37825:37833 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R37806:37810 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37791:37795 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37787:37789 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37779:37781 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37771:37773 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37770:37770 PL.Imp <> n:525 var
R37774:37775 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37777:37778 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37776:37776 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37782:37783 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37785:37786 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37784:37784 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37790:37790 PL.Imp <> m:524 var
R37797:37800 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37801:37802 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37804:37805 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37803:37803 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37811:37814 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R37815:37816 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37823:37824 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R37818:37821 PL.Imp <> ::imp_scope:x_'<='_x not
R37817:37817 PL.Imp <> n:525 var
R37822:37822 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37884:37886 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R37870:37874 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37855:37859 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37851:37853 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37843:37845 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R37835:37837 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R37834:37834 PL.Imp <> n:525 var
R37838:37839 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37841:37842 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37840:37840 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R37846:37847 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37849:37850 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37848:37848 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37854:37854 PL.Imp <> m:524 var
R37861:37864 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37865:37866 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37868:37869 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37867:37867 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37880:37882 PL.Imp Assertion_S ::assert_scope:x_'<'_x not
R37875:37876 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37878:37879 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37877:37877 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37883:37883 PL.Imp <> n:525 var
def 37901:37903 Concrete_Pretty_Printing.sample_decorated_program dc2
R37911:37911 Coq.Numbers.BinNums <> Z ind
binder 37906:37906 <> m:526
binder 37908:37908 <> n:527
R37916:37924 PL.Imp Concrete_Pretty_Printing decorated ind
R37931:37933 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R37940:37945 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R37935:37938 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37939:37939 PL.Imp <> m:526 var
R37953:37960 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R37947:37951 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R37946:37946 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37952:37952 PL.Imp <> m:526 var
R37991:37999 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R37961:37967 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R37969:37970 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 37968:37968 <> x:528
R37977:37981 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R37972:37975 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R37976:37976 PL.Imp <> m:526 var
R37987:37989 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R37982:37983 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37985:37986 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R37984:37984 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R37990:37990 PL.Imp <> m:526 var
R38020:38025 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38006:38010 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38001:38004 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38005:38005 PL.Imp <> m:526 var
R38016:38018 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38011:38012 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38014:38015 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38013:38013 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38019:38019 PL.Imp <> m:526 var
R38033:38040 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R38027:38031 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38026:38026 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38085:38093 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38041:38047 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38049:38050 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38048:38048 <> y:529
R38071:38075 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38057:38061 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38052:38055 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38056:38056 PL.Imp <> m:526 var
R38067:38069 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38062:38063 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38065:38066 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38064:38064 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38070:38070 PL.Imp <> m:526 var
R38081:38083 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38076:38077 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38079:38080 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38078:38078 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38130:38135 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38115:38119 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38111:38113 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38103:38105 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38095:38097 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38094:38094 PL.Imp <> n:527 var
R38098:38099 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38101:38102 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38100:38100 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38106:38107 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38109:38110 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38108:38108 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38114:38114 PL.Imp <> m:526 var
R38121:38124 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38125:38126 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38128:38129 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38127:38127 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38754:38759 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R38136:38141 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38148:38155 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38743:38753 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'While'_x_'Do'_x_'EndWhile' not
R38143:38146 PL.Imp <> ::imp_scope:x_'<='_x not
R38142:38142 PL.Imp <> n:527 var
R38147:38147 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38156:38158 PL.Imp Concrete_Pretty_Printing ::dcom_scope:'/*'_x not
R38210:38217 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38195:38199 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38180:38184 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38176:38178 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38168:38170 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38160:38162 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38159:38159 PL.Imp <> n:527 var
R38163:38164 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38166:38167 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38165:38165 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38171:38172 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38174:38175 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38173:38173 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38179:38179 PL.Imp <> m:526 var
R38186:38189 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38190:38191 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38193:38194 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38192:38192 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38200:38201 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38208:38209 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38203:38206 PL.Imp <> ::imp_scope:x_'<='_x not
R38202:38202 PL.Imp <> n:527 var
R38207:38207 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38229:38238 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_';;'_'/*'_x not
R38219:38223 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38218:38218 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38225:38227 PL.Imp <> ::imp_scope:x_'-'_x not
R38224:38224 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38228:38228 PL.Imp <> n:527 var
R38339:38349 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38239:38245 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38247:38248 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38246:38246 <> x:530
R38317:38321 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38285:38306 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38270:38274 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38266:38268 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38258:38260 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38250:38252 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38249:38249 PL.Imp <> n:527 var
R38253:38254 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38256:38257 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38255:38255 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38261:38262 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38264:38265 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38263:38263 PL.Imp <> x:530 var
R38269:38269 PL.Imp <> m:526 var
R38276:38279 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38280:38281 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38283:38284 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38282:38282 PL.Imp <> x:530 var
R38307:38308 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38315:38316 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38310:38313 PL.Imp <> ::imp_scope:x_'<='_x not
R38309:38309 PL.Imp <> n:527 var
R38314:38314 PL.Imp <> x:530 var
R38327:38329 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38322:38323 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38325:38326 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38324:38324 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38330:38331 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38337:38338 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38333:38335 PL.Imp <> ::imp_scope:x_'-'_x not
R38332:38332 PL.Imp <> x:530 var
R38336:38336 PL.Imp <> n:527 var
R38434:38444 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38350:38356 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38358:38359 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38357:38357 <> x:531
R38416:38420 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38388:38409 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38377:38381 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38373:38375 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38369:38371 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38361:38363 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38360:38360 PL.Imp <> n:527 var
R38364:38365 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38367:38368 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38366:38366 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38372:38372 PL.Imp <> x:531 var
R38376:38376 PL.Imp <> m:526 var
R38383:38386 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38387:38387 PL.Imp <> x:531 var
R38411:38414 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38410:38410 PL.Imp <> n:527 var
R38415:38415 PL.Imp <> x:531 var
R38426:38428 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38421:38422 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38424:38425 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38423:38423 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38430:38432 PL.Imp Assertion_S ::term_scope:x_'-'_x not
R38429:38429 PL.Imp <> x:531 var
R38433:38433 PL.Imp <> n:527 var
R38485:38492 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_x not
R38470:38474 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38466:38468 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38462:38464 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38454:38456 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38446:38448 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38445:38445 PL.Imp <> n:527 var
R38449:38450 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38452:38453 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38451:38451 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38457:38458 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38460:38461 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38459:38459 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38465:38465 PL.Imp <> n:527 var
R38469:38469 PL.Imp <> m:526 var
R38476:38479 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38480:38481 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38483:38484 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38482:38482 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38504:38511 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'/*'_x not
R38494:38498 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'::='_x not
R38493:38493 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38500:38502 PL.Imp <> ::imp_scope:x_'+'_x not
R38499:38499 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38601:38611 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38512:38518 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38520:38521 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38519:38519 <> y:532
R38562:38583 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38547:38551 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38543:38545 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38539:38541 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38531:38533 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38523:38525 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38522:38522 PL.Imp <> n:527 var
R38526:38527 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38529:38530 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38528:38528 PL.Imp <> y:532 var
R38534:38535 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38537:38538 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38536:38536 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38542:38542 PL.Imp <> n:527 var
R38546:38546 PL.Imp <> m:526 var
R38553:38556 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38557:38558 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38560:38561 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38559:38559 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38589:38591 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38584:38585 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38587:38588 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38586:38586 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38592:38593 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38599:38600 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38595:38597 PL.Imp <> ::imp_scope:x_'+'_x not
R38594:38594 PL.Imp <> y:532 var
R38693:38703 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38612:38618 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R38620:38621 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 38619:38619 <> y:533
R38658:38679 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38643:38647 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38639:38641 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38635:38637 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38627:38629 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38623:38625 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38622:38622 PL.Imp <> n:527 var
R38626:38626 PL.Imp <> y:533 var
R38630:38631 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38633:38634 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38632:38632 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38638:38638 PL.Imp <> n:527 var
R38642:38642 PL.Imp <> m:526 var
R38649:38652 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38653:38654 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38656:38657 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38655:38655 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38685:38687 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38680:38681 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38683:38684 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38682:38682 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38689:38691 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38688:38688 PL.Imp <> y:533 var
R38740:38742 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R38725:38729 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38721:38723 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38713:38715 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38705:38707 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38704:38704 PL.Imp <> n:527 var
R38708:38709 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38711:38712 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38710:38710 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38716:38717 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38719:38720 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38718:38718 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38724:38724 PL.Imp <> m:526 var
R38731:38734 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38735:38736 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38738:38739 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38737:38737 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38815:38823 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/'_'/*'_x not
R38796:38800 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38781:38785 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38777:38779 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38769:38771 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38761:38763 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38760:38760 PL.Imp <> n:527 var
R38764:38765 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38767:38768 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38766:38766 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38772:38773 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38775:38776 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38774:38774 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38780:38780 PL.Imp <> m:526 var
R38787:38790 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38791:38792 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38794:38795 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38793:38793 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38801:38804 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R38805:38806 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38813:38814 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R38808:38811 PL.Imp <> ::imp_scope:x_'<='_x not
R38807:38807 PL.Imp <> n:527 var
R38812:38812 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38874:38876 PL.Imp Concrete_Pretty_Printing ::dcom_scope:x_'*/' not
R38860:38864 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38845:38849 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R38841:38843 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R38833:38835 PL.Imp Assertion_S ::term_scope:x_'+'_x not
R38825:38827 PL.Imp Assertion_S ::term_scope:x_'*'_x not
R38824:38824 PL.Imp <> n:527 var
R38828:38829 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38831:38832 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38830:38830 PL.Imp Concrete_Pretty_Printing.sample_decorated_program Y inst
R38836:38837 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38839:38840 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38838:38838 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38844:38844 PL.Imp <> m:526 var
R38851:38854 PL.Imp Assertion_S ::assert_scope:x_'<='_x not
R38855:38856 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38858:38859 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38857:38857 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38870:38872 PL.Imp Assertion_S ::assert_scope:x_'<'_x not
R38865:38866 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38868:38869 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R38867:38867 PL.Imp Concrete_Pretty_Printing.sample_decorated_program X inst
R38873:38873 PL.Imp <> n:527 var
R38884:38907 PL.Imp Concrete_Pretty_Printing.sample_decorated_program <> mod
R38915:38938 PL.Imp Concrete_Pretty_Printing <> mod
mod 38949:38958 <> slow_minus
sec 38969:38978 slow_minus slow_minus
var 39025:39025 slow_minus.slow_minus m
var 39027:39027 slow_minus.slow_minus p
R39030:39030 Coq.Numbers.BinNums <> Z ind
inst 39043:39043 slow_minus X
R39046:39048 PL.Imp Concrete_Pretty_Printing var class
R39053:39061 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39073:39073 slow_minus Y
R39076:39078 PL.Imp Concrete_Pretty_Printing var class
R39083:39091 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39103:39103 slow_minus Z
R39106:39108 PL.Imp Concrete_Pretty_Printing var class
R39113:39121 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39133:39133 slow_minus W
R39136:39138 PL.Imp Concrete_Pretty_Printing var class
R39143:39151 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
inst 39163:39164 slow_minus ID
R39167:39169 PL.Imp Concrete_Pretty_Printing var class
R39174:39182 PL.Imp Concrete_Pretty_Printing :::'new_var()' not
def 39197:39200 slow_minus prog
R39203:39205 PL.Imp <> com ind
R39221:39227 PL.Imp <> ::imp_scope:x_';;'_x not
R39215:39219 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39214:39214 PL.Imp slow_minus X inst
R39220:39220 PL.Imp <> slow_minus.slow_minus.m var
R39235:39241 PL.Imp <> ::imp_scope:x_';;'_x not
R39229:39233 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39228:39228 PL.Imp slow_minus Z inst
R39234:39234 PL.Imp <> slow_minus.slow_minus.p var
R39242:39247 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39257:39266 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39298:39310 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R39248:39249 PL.Imp <> ::imp_scope:'!'_x not
R39256:39256 PL.Imp <> ::imp_scope:'!'_x not
R39251:39254 PL.Imp <> ::imp_scope:x_'=='_x not
R39250:39250 PL.Imp slow_minus X inst
R39278:39286 PL.Imp <> ::imp_scope:x_';;'_x not
R39268:39272 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39267:39267 PL.Imp slow_minus Z inst
R39274:39276 PL.Imp <> ::imp_scope:x_'-'_x not
R39273:39273 PL.Imp slow_minus Z inst
R39288:39292 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39287:39287 PL.Imp slow_minus X inst
R39294:39296 PL.Imp <> ::imp_scope:x_'-'_x not
R39293:39293 PL.Imp slow_minus X inst
def 39325:39329 slow_minus prog2
R39332:39334 PL.Imp <> com ind
R39354:39360 PL.Imp <> ::imp_scope:x_';;'_x not
R39344:39348 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39343:39343 PL.Imp slow_minus X inst
R39350:39352 PL.Imp <> ::imp_scope:x_'+'_x not
R39349:39349 PL.Imp slow_minus X inst
R39353:39353 PL.Imp slow_minus Y inst
R39372:39378 PL.Imp <> ::imp_scope:x_';;'_x not
R39362:39366 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39361:39361 PL.Imp slow_minus Y inst
R39368:39370 PL.Imp <> ::imp_scope:x_'-'_x not
R39367:39367 PL.Imp slow_minus X inst
R39371:39371 PL.Imp slow_minus Y inst
R39380:39384 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39379:39379 PL.Imp slow_minus X inst
R39386:39388 PL.Imp <> ::imp_scope:x_'-'_x not
R39385:39385 PL.Imp slow_minus X inst
R39389:39389 PL.Imp slow_minus Y inst
def 39404:39408 slow_minus prog3
R39411:39413 PL.Imp <> com ind
R39420:39422 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39429:39436 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39448:39455 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39519:39526 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39424:39427 PL.Imp <> ::imp_scope:x_'<='_x not
R39423:39423 PL.Imp slow_minus X inst
R39428:39428 PL.Imp slow_minus Y inst
R39438:39442 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39437:39437 PL.Imp slow_minus Z inst
R39444:39446 PL.Imp <> ::imp_scope:x_'-'_x not
R39443:39443 PL.Imp slow_minus X inst
R39447:39447 PL.Imp slow_minus Y inst
R39456:39458 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39465:39477 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39482:39494 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39506:39518 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R39460:39463 PL.Imp <> ::imp_scope:x_'<='_x not
R39459:39459 PL.Imp slow_minus X inst
R39464:39464 PL.Imp slow_minus Y inst
R39478:39481 PL.Imp <> ::imp_scope:'Skip' not
R39496:39500 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R39495:39495 PL.Imp slow_minus Z inst
R39502:39504 PL.Imp <> ::imp_scope:x_'-'_x not
R39501:39501 PL.Imp slow_minus Y inst
R39505:39505 PL.Imp slow_minus X inst
R39534:39543 PL.Imp slow_minus.slow_minus <> sec
R39550:39559 PL.Imp slow_minus <> mod
mod 39570:39584 <> Assertion_S_Tac
R39652:39684 PL.Imp Concrete_Pretty_Printing assn_sub def
R39687:39719 PL.Imp Concrete_Pretty_Printing aexp_sub def
R39806:39808 PL.Imp <> AId constr
R39806:39808 PL.Imp <> AId constr
R39846:39848 PL.Imp <> AId constr
R39846:39848 PL.Imp <> AId constr
R39882:39909 PL.Imp Concrete_Pretty_Printing AId def
R40000:40032 PL.Imp Concrete_Pretty_Printing assn_sub def
R40035:40067 PL.Imp Concrete_Pretty_Printing aexp_sub def
R40171:40173 PL.Imp <> AId constr
R40171:40173 PL.Imp <> AId constr
R40211:40213 PL.Imp <> AId constr
R40211:40213 PL.Imp <> AId constr
R40247:40274 PL.Imp Concrete_Pretty_Printing AId def
R40364:40366 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40368:40371 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40373:40376 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40378:40380 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40364:40366 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40368:40371 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40373:40376 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40378:40380 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40444:40448 PL.Imp Assertion_S :::x_'|--'_x not
R40444:40448 PL.Imp Assertion_S :::x_'|--'_x not
R40468:40480 PL.Imp Assertion_S simpl_derives prfax
R40399:40410 PL.Imp Assertion_S simpl_triple prfax
R40561:40563 PL.Imp <> AId constr
R40561:40563 PL.Imp <> AId constr
R40601:40603 PL.Imp <> AId constr
R40601:40603 PL.Imp <> AId constr
R40637:40664 PL.Imp Concrete_Pretty_Printing AId def
R40752:40754 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40756:40759 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40761:40764 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40766:40768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40752:40754 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40756:40759 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40761:40764 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40766:40768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R40839:40843 PL.Imp Assertion_S :::x_'|--'_x not
R40839:40843 PL.Imp Assertion_S :::x_'|--'_x not
R40863:40875 PL.Imp Assertion_S simpl_derives prfax
R40787:40798 PL.Imp Assertion_S simpl_triple prfax
R40968:40970 PL.Imp <> AId constr
R40968:40970 PL.Imp <> AId constr
R41008:41010 PL.Imp <> AId constr
R41008:41010 PL.Imp <> AId constr
R41044:41071 PL.Imp Concrete_Pretty_Printing AId def
R41174:41195 PL.Imp Assertion_S elim_trivial_ex_kernal constr
R41238:41255 PL.Imp Assertion_S elim_trivial_ex_ex thm
R41371:41373 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41371:41373 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41527:41545 PL.Imp Assertion_S elim_trivial_ex_all thm
R41661:41663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41661:41663 Coq.Init.Logic <> ::type_scope:x_'='_x not
R41816:41833 PL.Imp Assertion_S elim_trivial_ex_or constr
R41875:41893 PL.Imp Assertion_S elim_trivial_ex_and constr
R41935:41953 PL.Imp Assertion_S elim_trivial_ex_not constr
R41995:42014 PL.Imp Assertion_S elim_trivial_ex_atom constr
R42075:42077 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42079:42082 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42084:42087 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42089:42091 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42075:42077 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42079:42082 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42084:42087 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42089:42091 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42179:42183 PL.Imp Assertion_S :::x_'|--'_x not
R42179:42183 PL.Imp Assertion_S :::x_'|--'_x not
R42204:42226 PL.Imp Assertion_S elim_trivial_ex_derives prfax
R42111:42132 PL.Imp Assertion_S elim_trivial_ex_triple prfax
R42331:42333 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42335:42338 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42340:42343 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42345:42347 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42331:42333 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42335:42338 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42340:42343 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42345:42347 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R42437:42441 PL.Imp Assertion_S :::x_'|--'_x not
R42437:42441 PL.Imp Assertion_S :::x_'|--'_x not
R42462:42484 PL.Imp Assertion_S elim_trivial_ex_derives prfax
R42367:42388 PL.Imp Assertion_S elim_trivial_ex_triple prfax
R42751:42755 PL.Imp Assertion_S :::x_'|--'_x not
R42751:42755 PL.Imp Assertion_S :::x_'|--'_x not
R42874:42885 PL.Imp Assertion_S FOL_complete thm
R42934:42949 PL.Imp Assertion_S Assertion_denote def
R42951:42961 PL.Imp Assertion_S term_denote def
R43012:43022 PL.Imp Assertion_S aexp_denote def
R43028:43055 PL.Imp Concrete_Pretty_Printing AId def
R43012:43022 PL.Imp Assertion_S aexp_denote def
R43028:43055 PL.Imp Concrete_Pretty_Printing AId def
R43123:43133 PL.Imp Assertion_S aexp_denote def
R43139:43166 PL.Imp Concrete_Pretty_Printing AId def
R43301:43315 PL.Imp Assertion_S_Tac <> mod
mod 43326:43344 <> Axiomatic_semantics
ax 43387:43395 Axiomatic_semantics hoare_seq
R43414:43422 PL.Imp Assertion_S Assertion ind
binder 43407:43407 <> P:536
binder 43409:43409 <> Q:537
binder 43411:43411 <> R:538
R43433:43435 PL.Imp <> com ind
binder 43426:43427 <> c1:539
binder 43429:43430 <> c2:540
R43455:43460 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43475:43480 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43481:43482 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43484:43486 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43493:43495 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43497:43498 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43483:43483 PL.Imp <> P:536 var
R43489:43490 PL.Imp <> ::imp_scope:x_';;'_x not
R43487:43488 PL.Imp <> c1:539 var
R43491:43492 PL.Imp <> c2:540 var
R43496:43496 PL.Imp <> R:538 var
R43461:43462 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43464:43466 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43469:43471 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43473:43474 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43463:43463 PL.Imp <> Q:537 var
R43467:43468 PL.Imp <> c2:540 var
R43472:43472 PL.Imp <> R:538 var
R43441:43442 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43444:43446 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43449:43451 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43453:43454 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43443:43443 PL.Imp <> P:536 var
R43447:43448 PL.Imp <> c1:539 var
R43452:43452 PL.Imp <> Q:537 var
ax 43508:43517 Axiomatic_semantics hoare_skip
binder 43528:43528 <> P:542
R43533:43534 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43536:43538 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43543:43545 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43547:43548 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43535:43535 PL.Imp <> P:542 var
R43539:43542 PL.Imp <> ::imp_scope:'Skip' not
R43546:43546 PL.Imp <> P:542 var
ax 43558:43565 Axiomatic_semantics hoare_if
binder 43576:43576 <> P:544
binder 43578:43578 <> Q:545
binder 43580:43580 <> b:546
binder 43582:43583 <> c1:547
binder 43585:43586 <> c2:548
R43619:43624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43657:43662 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43663:43665 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43667:43670 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43697:43700 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43702:43704 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43666:43666 PL.Imp <> P:544 var
R43671:43673 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43675:43680 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43683:43688 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43691:43696 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R43674:43674 PL.Imp <> b:546 var
R43681:43682 PL.Imp <> c1:547 var
R43689:43690 PL.Imp <> c2:548 var
R43701:43701 PL.Imp <> Q:545 var
R43625:43627 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43643:43646 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43649:43652 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43654:43656 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43629:43633 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43628:43628 PL.Imp <> P:544 var
R43634:43637 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R43638:43639 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43641:43642 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43640:43640 PL.Imp <> b:546 var
R43647:43648 PL.Imp <> c2:548 var
R43653:43653 PL.Imp <> Q:545 var
R43591:43593 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43605:43608 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43611:43614 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43616:43618 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43595:43599 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43594:43594 PL.Imp <> P:544 var
R43600:43601 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43603:43604 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43602:43602 PL.Imp <> b:546 var
R43609:43610 PL.Imp <> c1:547 var
R43615:43615 PL.Imp <> Q:545 var
ax 43714:43724 Axiomatic_semantics hoare_while
binder 43735:43735 <> P:550
binder 43737:43737 <> b:551
binder 43739:43739 <> c:552
R43769:43774 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R43775:43776 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43778:43780 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43802:43805 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43821:43823 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43777:43777 PL.Imp <> P:550 var
R43781:43786 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43788:43791 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43793:43801 PL.Imp <> ::imp_scope:'While'_x_'Do'_x_'EndWhile' not
R43787:43787 PL.Imp <> b:551 var
R43792:43792 PL.Imp <> c:552 var
R43807:43811 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43806:43806 PL.Imp <> P:550 var
R43812:43815 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R43816:43817 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43819:43820 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43818:43818 PL.Imp <> b:551 var
R43744:43746 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43758:43761 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43763:43765 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43767:43768 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43748:43752 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43747:43747 PL.Imp <> P:550 var
R43753:43754 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43756:43757 PL.Imp Assertion_S ::assert_scope:'{['_x_']}' not
R43755:43755 PL.Imp <> b:551 var
R43762:43762 PL.Imp <> c:552 var
R43766:43766 PL.Imp <> P:550 var
ax 43833:43846 Axiomatic_semantics hoare_asgn_fwd
binder 43857:43857 <> P:554
R43864:43866 PL.Imp Concrete_Pretty_Printing var class
binder 43861:43861 <> X:556
binder 43869:43869 <> E:557
R43874:43876 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43878:43883 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43891:43896 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43963:43965 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R43877:43877 PL.Imp <> P:554 var
R43885:43889 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R43884:43884 PL.Imp <> X:556 var
R43890:43890 PL.Imp <> E:557 var
R43897:43903 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R43905:43906 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 43904:43904 <> x:558
R43918:43937 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R43908:43909 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43911:43915 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43917:43917 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R43910:43910 PL.Imp <> X:556 var
R43916:43916 PL.Imp <> x:558 var
R43907:43907 PL.Imp <> P:554 var
R43943:43945 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R43938:43939 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43941:43942 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43940:43940 PL.Imp <> X:556 var
R43946:43948 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43960:43962 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R43950:43951 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43953:43957 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43959:43959 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R43952:43952 PL.Imp <> X:556 var
R43958:43958 PL.Imp <> x:558 var
R43949:43949 PL.Imp <> E:557 var
ax 43975:43991 Axiomatic_semantics hoare_consequence
R44015:44023 PL.Imp Assertion_S Assertion ind
binder 44003:44003 <> P:560
binder 44005:44006 <> P':561
binder 44008:44008 <> Q:562
binder 44010:44011 <> Q':563
binder 44026:44026 <> c:564
R44039:44044 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44060:44065 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44074:44079 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44080:44081 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44083:44085 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44087:44089 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44091:44092 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44082:44082 PL.Imp <> P:560 var
R44086:44086 PL.Imp <> c:564 var
R44090:44090 PL.Imp <> Q:562 var
R44068:44072 PL.Imp Assertion_S :::x_'|--'_x not
R44066:44067 PL.Imp <> Q':563 var
R44073:44073 PL.Imp <> Q:562 var
R44045:44046 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44049:44051 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44053:44055 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44058:44059 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44047:44048 PL.Imp <> P':561 var
R44052:44052 PL.Imp <> c:564 var
R44056:44057 PL.Imp <> Q':563 var
R44032:44036 PL.Imp Assertion_S :::x_'|--'_x not
R44031:44031 PL.Imp <> P:560 var
R44037:44038 PL.Imp <> P':561 var
ax 44102:44115 Axiomatic_semantics hoare_asgn_bwd
binder 44126:44126 <> P:566
R44133:44135 PL.Imp Concrete_Pretty_Printing var class
binder 44130:44130 <> X:568
binder 44138:44138 <> E:569
R44143:44145 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44158:44161 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44169:44172 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44174:44176 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R44147:44149 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44151:44155 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44157:44157 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R44150:44150 PL.Imp <> X:568 var
R44156:44156 PL.Imp <> E:569 var
R44146:44146 PL.Imp <> P:566 var
R44163:44167 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R44162:44162 PL.Imp <> X:568 var
R44168:44168 PL.Imp <> E:569 var
R44173:44173 PL.Imp <> P:566 var
R44184:44202 PL.Imp Axiomatic_semantics <> mod
mod 44213:44229 <> Assertion_S_Rules
R44272:44278 PL.Imp Assertion_S derives def
prf 44288:44296 Assertion_S_Rules AND_left1
R44313:44321 PL.Imp Assertion_S Assertion ind
binder 44306:44306 <> P:571
binder 44308:44308 <> Q:572
binder 44310:44310 <> R:573
R44333:44338 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44346:44350 PL.Imp Assertion_S :::x_'|--'_x not
R44340:44344 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44339:44339 PL.Imp <> P:571 var
R44345:44345 PL.Imp <> Q:572 var
R44351:44351 PL.Imp <> R:573 var
R44327:44331 PL.Imp Assertion_S :::x_'|--'_x not
R44326:44326 PL.Imp <> P:571 var
R44332:44332 PL.Imp <> R:573 var
prf 44434:44442 Assertion_S_Rules AND_left2
R44459:44467 PL.Imp Assertion_S Assertion ind
binder 44452:44452 <> P:574
binder 44454:44454 <> Q:575
binder 44456:44456 <> R:576
R44479:44484 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44492:44496 PL.Imp Assertion_S :::x_'|--'_x not
R44486:44490 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44485:44485 PL.Imp <> P:574 var
R44491:44491 PL.Imp <> Q:575 var
R44497:44497 PL.Imp <> R:576 var
R44473:44477 PL.Imp Assertion_S :::x_'|--'_x not
R44472:44472 PL.Imp <> Q:575 var
R44478:44478 PL.Imp <> R:576 var
prf 44580:44588 Assertion_S_Rules AND_right
R44605:44613 PL.Imp Assertion_S Assertion ind
binder 44598:44598 <> P:577
binder 44600:44600 <> Q:578
binder 44602:44602 <> R:579
R44625:44630 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44638:44643 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44645:44649 PL.Imp Assertion_S :::x_'|--'_x not
R44644:44644 PL.Imp <> P:577 var
R44651:44655 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R44650:44650 PL.Imp <> Q:578 var
R44656:44656 PL.Imp <> R:579 var
R44632:44636 PL.Imp Assertion_S :::x_'|--'_x not
R44631:44631 PL.Imp <> P:577 var
R44637:44637 PL.Imp <> R:579 var
R44619:44623 PL.Imp Assertion_S :::x_'|--'_x not
R44618:44618 PL.Imp <> P:577 var
R44624:44624 PL.Imp <> Q:578 var
prf 44760:44766 Assertion_S_Rules OR_left
R44783:44791 PL.Imp Assertion_S Assertion ind
binder 44776:44776 <> P:580
binder 44778:44778 <> Q:581
binder 44780:44780 <> R:582
R44803:44808 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44816:44821 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44828:44832 PL.Imp Assertion_S :::x_'|--'_x not
R44823:44826 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R44822:44822 PL.Imp <> P:580 var
R44827:44827 PL.Imp <> Q:581 var
R44833:44833 PL.Imp <> R:582 var
R44810:44814 PL.Imp Assertion_S :::x_'|--'_x not
R44809:44809 PL.Imp <> Q:581 var
R44815:44815 PL.Imp <> R:582 var
R44797:44801 PL.Imp Assertion_S :::x_'|--'_x not
R44796:44796 PL.Imp <> P:580 var
R44802:44802 PL.Imp <> R:582 var
prf 44937:44945 Assertion_S_Rules OR_right1
R44962:44970 PL.Imp Assertion_S Assertion ind
binder 44955:44955 <> P:583
binder 44957:44957 <> Q:584
binder 44959:44959 <> R:585
R44982:44987 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R44989:44993 PL.Imp Assertion_S :::x_'|--'_x not
R44988:44988 PL.Imp <> P:583 var
R44995:44998 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R44994:44994 PL.Imp <> Q:584 var
R44999:44999 PL.Imp <> R:585 var
R44976:44980 PL.Imp Assertion_S :::x_'|--'_x not
R44975:44975 PL.Imp <> P:583 var
R44981:44981 PL.Imp <> Q:584 var
prf 45082:45090 Assertion_S_Rules OR_right2
R45107:45115 PL.Imp Assertion_S Assertion ind
binder 45100:45100 <> P:586
binder 45102:45102 <> Q:587
binder 45104:45104 <> R:588
R45127:45132 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45134:45138 PL.Imp Assertion_S :::x_'|--'_x not
R45133:45133 PL.Imp <> P:586 var
R45140:45143 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R45139:45139 PL.Imp <> Q:587 var
R45144:45144 PL.Imp <> R:588 var
R45121:45125 PL.Imp Assertion_S :::x_'|--'_x not
R45120:45120 PL.Imp <> P:586 var
R45126:45126 PL.Imp <> R:588 var
prf 45227:45229 Assertion_S_Rules LEM
R45244:45252 PL.Imp Assertion_S Assertion ind
binder 45239:45239 <> P:589
binder 45241:45241 <> Q:590
R45258:45262 PL.Imp Assertion_S :::x_'|--'_x not
R45257:45257 PL.Imp <> P:589 var
R45264:45267 PL.Imp Assertion_S ::assert_scope:x_'OR'_x not
R45263:45263 PL.Imp <> Q:590 var
R45268:45271 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R45272:45272 PL.Imp <> Q:590 var
prf 45335:45340 Assertion_S_Rules CONTRA
R45355:45363 PL.Imp Assertion_S Assertion ind
binder 45350:45350 <> P:591
binder 45352:45352 <> Q:592
R45379:45383 PL.Imp Assertion_S :::x_'|--'_x not
R45369:45373 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R45368:45368 PL.Imp <> P:591 var
R45374:45377 PL.Imp Assertion_S ::assert_scope:'NOT'_x not
R45378:45378 PL.Imp <> P:591 var
R45384:45384 PL.Imp <> Q:592 var
prf 45447:45455 Assertion_S_Rules Prop_left
binder 45466:45466 <> P:593
R45479:45487 PL.Imp Assertion_S Assertion ind
binder 45476:45476 <> Q:594
R45496:45501 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45503:45507 PL.Imp Assertion_S :::x_'|--'_x not
R45502:45502 PL.Imp <> P:593 var
R45508:45508 PL.Imp <> Q:594 var
R45493:45494 Coq.Init.Logic <> ::type_scope:'~'_x not
R45495:45495 PL.Imp <> P:593 var
prf 45571:45580 Assertion_S_Rules Prop_right
R45594:45602 PL.Imp Assertion_S Assertion ind
binder 45591:45591 <> P:595
binder 45606:45606 <> Q:596
R45619:45624 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45626:45630 PL.Imp Assertion_S :::x_'|--'_x not
R45625:45625 PL.Imp <> P:595 var
R45631:45631 PL.Imp <> Q:596 var
R45618:45618 PL.Imp <> Q:596 var
prf 45694:45703 Assertion_S_Rules False_left
R45717:45725 PL.Imp Assertion_S Assertion ind
binder 45714:45714 <> P:597
R45736:45740 PL.Imp Assertion_S :::x_'|--'_x not
R45731:45735 Coq.Init.Logic <> False ind
R45741:45741 PL.Imp <> P:597 var
R45769:45777 PL.Imp Assertion_S_Rules Prop_left thm
R45769:45777 PL.Imp Assertion_S_Rules Prop_left thm
prf 45801:45810 Assertion_S_Rules True_right
R45824:45832 PL.Imp Assertion_S Assertion ind
binder 45821:45821 <> P:598
R45839:45843 PL.Imp Assertion_S :::x_'|--'_x not
R45838:45838 PL.Imp <> P:598 var
R45844:45847 Coq.Init.Logic <> True ind
R45875:45884 PL.Imp Assertion_S_Rules Prop_right thm
R45875:45884 PL.Imp Assertion_S_Rules Prop_right thm
prf 45908:45918 Assertion_S_Rules FORALL_left
R45933:45936 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R45937:45945 PL.Imp Assertion_S Assertion ind
R45932:45932 Coq.Numbers.BinNums <> Z ind
binder 45929:45929 <> P:599
R45952:45960 PL.Imp Assertion_S Assertion ind
binder 45949:45949 <> Q:600
R45967:45967 Coq.Numbers.BinNums <> Z ind
binder 45964:45964 <> x:601
R45982:45987 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46001:46005 PL.Imp Assertion_S :::x_'|--'_x not
R45988:45994 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
R45996:45997 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
binder 45995:45995 <> x:602
R45998:45998 PL.Imp <> P:599 var
R46000:46000 PL.Imp <> x:602 var
R46006:46006 PL.Imp <> Q:600 var
R45976:45980 PL.Imp Assertion_S :::x_'|--'_x not
R45973:45973 PL.Imp <> P:599 var
R45975:45975 PL.Imp <> x:601 var
R45981:45981 PL.Imp <> Q:600 var
prf 46074:46085 Assertion_S_Rules FORALL_right
R46099:46107 PL.Imp Assertion_S Assertion ind
binder 46096:46096 <> P:603
R46115:46118 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46119:46127 PL.Imp Assertion_S Assertion ind
R46114:46114 Coq.Numbers.BinNums <> Z ind
binder 46111:46111 <> Q:604
R46133:46133 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46153:46159 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46161:46165 PL.Imp Assertion_S :::x_'|--'_x not
R46160:46160 PL.Imp <> P:603 var
R46166:46172 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
R46174:46175 PL.Imp Assertion_S ::assert_scope:'FORALL'_x_','_x not
binder 46173:46173 <> x:605
R46176:46176 PL.Imp <> Q:604 var
R46178:46178 PL.Imp <> x:605 var
binder 46141:46141 <> x:606
R46145:46149 PL.Imp Assertion_S :::x_'|--'_x not
R46144:46144 PL.Imp <> P:603 var
R46150:46150 PL.Imp <> Q:604 var
R46152:46152 PL.Imp <> x:606 var
prf 46246:46256 Assertion_S_Rules EXISTS_left
R46271:46274 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46275:46283 PL.Imp Assertion_S Assertion ind
R46270:46270 Coq.Numbers.BinNums <> Z ind
binder 46267:46267 <> P:607
R46290:46298 PL.Imp Assertion_S Assertion ind
binder 46287:46287 <> Q:608
R46304:46304 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46324:46330 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46344:46348 PL.Imp Assertion_S :::x_'|--'_x not
R46331:46337 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R46339:46340 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 46338:46338 <> x:609
R46341:46341 PL.Imp <> P:607 var
R46343:46343 PL.Imp <> x:609 var
R46349:46349 PL.Imp <> Q:608 var
binder 46312:46312 <> x:610
R46318:46322 PL.Imp Assertion_S :::x_'|--'_x not
R46315:46315 PL.Imp <> P:607 var
R46317:46317 PL.Imp <> x:610 var
R46323:46323 PL.Imp <> Q:608 var
prf 46417:46428 Assertion_S_Rules EXISTS_right
R46442:46450 PL.Imp Assertion_S Assertion ind
binder 46439:46439 <> P:611
R46458:46461 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46462:46470 PL.Imp Assertion_S Assertion ind
R46457:46457 Coq.Numbers.BinNums <> Z ind
binder 46454:46454 <> Q:612
R46477:46477 Coq.Numbers.BinNums <> Z ind
binder 46474:46474 <> x:613
R46492:46497 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46499:46503 PL.Imp Assertion_S :::x_'|--'_x not
R46498:46498 PL.Imp <> P:611 var
R46504:46510 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R46512:46513 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 46511:46511 <> x:614
R46514:46514 PL.Imp <> Q:612 var
R46516:46516 PL.Imp <> x:614 var
R46484:46488 PL.Imp Assertion_S :::x_'|--'_x not
R46483:46483 PL.Imp <> P:611 var
R46489:46489 PL.Imp <> Q:612 var
R46491:46491 PL.Imp <> x:613 var
prf 46584:46595 Assertion_S_Rules derives_refl
R46609:46617 PL.Imp Assertion_S Assertion ind
binder 46606:46606 <> P:615
R46624:46628 PL.Imp Assertion_S :::x_'|--'_x not
R46623:46623 PL.Imp <> P:615 var
R46629:46629 PL.Imp <> P:615 var
binder 46662:46664 <> rho:616
binder 46666:46666 <> H:617
R46671:46671 PL.Imp <> H:617 var
binder 46662:46664 <> rho:618
binder 46666:46666 <> H:619
R46671:46671 PL.Imp <> H:619 var
prf 46687:46699 Assertion_S_Rules derives_trans
R46717:46725 PL.Imp Assertion_S Assertion ind
binder 46710:46710 <> P:620
binder 46712:46712 <> Q:621
binder 46714:46714 <> R:622
R46738:46743 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46751:46756 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R46758:46762 PL.Imp Assertion_S :::x_'|--'_x not
R46757:46757 PL.Imp <> P:620 var
R46763:46763 PL.Imp <> R:622 var
R46745:46749 PL.Imp Assertion_S :::x_'|--'_x not
R46744:46744 PL.Imp <> Q:621 var
R46750:46750 PL.Imp <> R:622 var
R46732:46736 PL.Imp Assertion_S :::x_'|--'_x not
R46731:46731 PL.Imp <> P:620 var
R46737:46737 PL.Imp <> Q:621 var
binder 46796:46798 <> rho:623
binder 46800:46801 <> HH:624
R46820:46821 PL.Imp <> HH:624 var
R46816:46818 PL.Imp <> rho:623 var
R46809:46811 PL.Imp <> rho:623 var
binder 46796:46798 <> rho:625
binder 46800:46801 <> HH:626
R46820:46821 PL.Imp <> HH:626 var
R46816:46818 PL.Imp <> rho:625 var
R46809:46811 PL.Imp <> rho:625 var
R46836:46852 PL.Imp Assertion_S_Rules <> mod
mod 46863:46875 <> Derived_Rules
prf 46977:46997 Derived_Rules hoare_consequence_pre
binder 47007:47007 <> P:627
binder 47009:47010 <> P':628
binder 47012:47012 <> Q:629
binder 47014:47014 <> c:630
R47027:47032 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47051:47056 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47057:47059 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47061:47064 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47066:47069 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47071:47073 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47060:47060 PL.Imp <> P:627 var
R47065:47065 PL.Imp <> c:630 var
R47070:47070 PL.Imp <> Q:629 var
R47033:47035 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47038:47041 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47043:47046 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47048:47050 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47036:47037 PL.Imp <> P':628 var
R47042:47042 PL.Imp <> c:630 var
R47047:47047 PL.Imp <> Q:629 var
R47020:47024 PL.Imp Assertion_S :::x_'|--'_x not
R47019:47019 PL.Imp <> P:627 var
R47025:47026 PL.Imp <> P':628 var
R47102:47118 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47102:47118 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47158:47169 PL.Imp Assertion_S_Rules derives_refl thm
R47158:47169 PL.Imp Assertion_S_Rules derives_refl thm
prf 47188:47209 Derived_Rules hoare_consequence_post
binder 47219:47219 <> P:631
binder 47221:47221 <> Q:632
binder 47223:47224 <> Q':633
binder 47226:47226 <> c:634
R47249:47254 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47263:47268 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47269:47271 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47273:47276 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47278:47281 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47283:47285 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47272:47272 PL.Imp <> P:631 var
R47277:47277 PL.Imp <> c:634 var
R47282:47282 PL.Imp <> Q:632 var
R47257:47261 PL.Imp Assertion_S :::x_'|--'_x not
R47255:47256 PL.Imp <> Q':633 var
R47262:47262 PL.Imp <> Q:632 var
R47231:47233 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47235:47238 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47240:47243 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47246:47248 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47234:47234 PL.Imp <> P:631 var
R47239:47239 PL.Imp <> c:634 var
R47244:47245 PL.Imp <> Q':633 var
R47314:47330 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47314:47330 PL.Imp Axiomatic_semantics hoare_consequence prfax
R47343:47354 PL.Imp Assertion_S_Rules derives_refl thm
R47343:47354 PL.Imp Assertion_S_Rules derives_refl thm
prf 47400:47412 Derived_Rules hoare_if_weak
binder 47423:47423 <> P:635
binder 47425:47425 <> Q:636
binder 47427:47427 <> b:637
binder 47429:47430 <> c1:638
binder 47432:47433 <> c2:639
R47452:47457 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47472:47477 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47478:47479 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47481:47483 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47510:47512 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47514:47515 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47480:47480 PL.Imp <> P:635 var
R47484:47486 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47488:47493 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47496:47501 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47504:47509 PL.Imp <> ::imp_scope:'If'_x_'Then'_x_'Else'_x_'EndIf' not
R47487:47487 PL.Imp <> b:637 var
R47494:47495 PL.Imp <> c1:638 var
R47502:47503 PL.Imp <> c2:639 var
R47513:47513 PL.Imp <> Q:636 var
R47458:47459 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47461:47463 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47466:47468 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47470:47471 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47460:47460 PL.Imp <> P:635 var
R47464:47465 PL.Imp <> c2:639 var
R47469:47469 PL.Imp <> Q:636 var
R47438:47439 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47441:47443 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47446:47448 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47450:47451 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47440:47440 PL.Imp <> P:635 var
R47444:47445 PL.Imp <> c1:638 var
R47449:47449 PL.Imp <> Q:636 var
R47543:47550 PL.Imp Axiomatic_semantics hoare_if prfax
R47543:47550 PL.Imp Axiomatic_semantics hoare_if prfax
R47564:47584 PL.Imp Derived_Rules hoare_consequence_pre thm
R47564:47584 PL.Imp Derived_Rules hoare_consequence_pre thm
R47617:47625 PL.Imp Assertion_S_Rules AND_left1 thm
R47617:47625 PL.Imp Assertion_S_Rules AND_left1 thm
R47638:47649 PL.Imp Assertion_S_Rules derives_refl thm
R47638:47649 PL.Imp Assertion_S_Rules derives_refl thm
R47663:47683 PL.Imp Derived_Rules hoare_consequence_pre thm
R47663:47683 PL.Imp Derived_Rules hoare_consequence_pre thm
R47717:47725 PL.Imp Assertion_S_Rules AND_left1 thm
R47717:47725 PL.Imp Assertion_S_Rules AND_left1 thm
R47738:47749 PL.Imp Assertion_S_Rules derives_refl thm
R47738:47749 PL.Imp Assertion_S_Rules derives_refl thm
prf 47768:47781 Derived_Rules hoare_asgn_seq
binder 47791:47791 <> P:640
R47798:47800 PL.Imp Concrete_Pretty_Printing var class
binder 47795:47795 <> X:642
binder 47803:47803 <> E:643
binder 47805:47805 <> c:644
binder 47807:47807 <> Q:645
R47879:47884 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R47885:47887 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47889:47892 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47905:47908 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47910:47912 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47888:47888 PL.Imp <> P:640 var
R47900:47903 PL.Imp <> ::imp_scope:x_';;'_x not
R47894:47898 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R47893:47893 PL.Imp <> X:642 var
R47899:47899 PL.Imp <> E:643 var
R47904:47904 PL.Imp <> c:644 var
R47909:47909 PL.Imp <> Q:645 var
R47812:47814 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47866:47869 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47871:47874 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47876:47878 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R47815:47821 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R47823:47824 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 47822:47822 <> x:646
R47836:47840 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R47826:47827 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47829:47833 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47835:47835 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R47828:47828 PL.Imp <> X:642 var
R47834:47834 PL.Imp <> x:646 var
R47825:47825 PL.Imp <> P:640 var
R47846:47848 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R47841:47842 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47844:47845 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47843:47843 PL.Imp <> X:642 var
R47849:47851 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47863:47865 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R47853:47854 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47856:47860 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47862:47862 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R47855:47855 PL.Imp <> X:642 var
R47861:47861 PL.Imp <> x:646 var
R47852:47852 PL.Imp <> E:643 var
R47870:47870 PL.Imp <> c:644 var
R47875:47875 PL.Imp <> Q:645 var
R47941:47949 PL.Imp Axiomatic_semantics hoare_seq prfax
R47941:47949 PL.Imp Axiomatic_semantics hoare_seq prfax
R47962:47975 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R47962:47975 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
prf 48007:48023 Derived_Rules hoare_asgn_conseq
binder 48033:48033 <> P:647
R48040:48042 PL.Imp Concrete_Pretty_Printing var class
binder 48037:48037 <> X:649
binder 48045:48045 <> E:650
binder 48047:48047 <> Q:651
R48109:48114 Coq.Init.Logic <> ::type_scope:x_'->'_x not
R48115:48117 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48119:48122 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48130:48133 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48135:48137 PL.Imp Assertion_S :::'{{'_x_'}}'_x_'{{'_x_'}}' not
R48118:48118 PL.Imp <> P:647 var
R48124:48128 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'::='_x not
R48123:48123 PL.Imp <> X:649 var
R48129:48129 PL.Imp <> E:650 var
R48134:48134 PL.Imp <> Q:651 var
R48103:48107 PL.Imp Assertion_S :::x_'|--'_x not
R48052:48058 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
R48060:48061 PL.Imp Assertion_S ::assert_scope:'EXISTS'_x_','_x not
binder 48059:48059 <> x:652
R48073:48077 PL.Imp Assertion_S ::assert_scope:x_'AND'_x not
R48063:48064 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48066:48070 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48072:48072 PL.Imp Concrete_Pretty_Printing ::assert_scope:x_'['_x_'|->'_x_']' not
R48065:48065 PL.Imp <> X:649 var
R48071:48071 PL.Imp <> x:652 var
R48062:48062 PL.Imp <> P:647 var
R48083:48085 PL.Imp Assertion_S ::assert_scope:x_'='_x not
R48078:48079 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48081:48082 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48080:48080 PL.Imp <> X:649 var
R48086:48088 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48100:48102 PL.Imp Assertion_S ::term_scope:'{['_x_']}' not
R48090:48091 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48093:48097 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48099:48099 PL.Imp Concrete_Pretty_Printing ::imp_scope:x_'['_x_'|->'_x_']' not
R48092:48092 PL.Imp <> X:649 var
R48098:48098 PL.Imp <> x:652 var
R48089:48089 PL.Imp <> E:650 var
R48108:48108 PL.Imp <> Q:651 var
R48166:48187 PL.Imp Derived_Rules hoare_consequence_post thm
R48166:48187 PL.Imp Derived_Rules hoare_consequence_post thm
R48200:48213 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R48200:48213 PL.Imp Axiomatic_semantics hoare_asgn_fwd prfax
R48239:48251 PL.Imp Derived_Rules <> mod
mod 48401:48411 <> Assertion_D
def 48459:48469 Assertion_D logical_var
R48480:48482 Coq.Init.Datatypes <> nat ind
ind 48496:48500 Assertion_D aexp'
constr 48516:48520 Assertion_D ANum'
constr 48537:48540 Assertion_D AId'
constr 48555:48560 Assertion_D APlus'
constr 48582:48588 Assertion_D AMinus'
constr 48610:48615 Assertion_D AMult'
ind 48638:48641 Assertion_D term
constr 48657:48660 Assertion_D TNum
constr 48674:48676 Assertion_D TId
constr 48699:48705 Assertion_D TDenote
constr 48723:48727 Assertion_D TPlus
constr 48748:48753 Assertion_D TMinus
constr 48774:48778 Assertion_D TMult
R48527:48530 PL.Imp <> term:654 ind
binder 48523:48523 <> t:657
R48546:48548 PL.Imp <> var def
binder 48543:48543 <> X:658
R48571:48575 PL.Imp <> aexp':653 ind
binder 48563:48564 <> a1:659
binder 48566:48567 <> a2:660
R48599:48603 PL.Imp <> aexp':653 ind
binder 48591:48592 <> a1:661
binder 48594:48595 <> a2:662
R48626:48630 PL.Imp <> aexp':653 ind
binder 48618:48619 <> a1:663
binder 48621:48622 <> a2:664
R48667:48667 Coq.Numbers.BinNums <> Z ind
binder 48663:48663 <> n:665
R48682:48692 PL.Imp Assertion_D logical_var def
binder 48679:48679 <> x:666
R48712:48716 PL.Imp <> aexp':653 ind
binder 48708:48708 <> a:667
R48738:48741 PL.Imp <> term:654 ind
binder 48730:48731 <> t1:668
binder 48733:48734 <> t2:669
R48764:48767 PL.Imp <> term:654 ind
binder 48756:48757 <> t1:670
binder 48759:48760 <> t2:671
R48789:48792 PL.Imp <> term:654 ind
binder 48781:48782 <> t1:672
binder 48784:48785 <> t2:673
ind 48807:48811 Assertion_D bexp'
constr 48827:48832 Assertion_D BTrue'
constr 48838:48844 Assertion_D BFalse'
constr 48850:48853 Assertion_D BEq'
constr 48875:48878 Assertion_D BLe'
constr 48900:48904 Assertion_D BNot'
constr 48922:48926 Assertion_D BAnd'
R48864:48868 PL.Imp Assertion_D aexp' ind
binder 48856:48857 <> a1:676
binder 48859:48860 <> a2:677
R48889:48893 PL.Imp Assertion_D aexp' ind
binder 48881:48882 <> a1:678
binder 48884:48885 <> a2:679
R48911:48915 PL.Imp <> bexp':674 ind
binder 48907:48907 <> b:680
R48937:48941 PL.Imp <> bexp':674 ind
binder 48929:48930 <> b1:681
binder 48932:48933 <> b2:682
R48946:48976 PL.Imp Assertion_D ANum' constr
R48979:49007 PL.Imp Assertion_D AId' constr
